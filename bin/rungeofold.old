#!/bach1/usr/local/bin/python
#### RUNGEOFOLD.py ####
# This script runs the GeoFOLD suite of programs
# It is a copy of the orginal C Shell server written by Dr. Chris Bystroff
# The input files are (1) a parameters file and (2) a PDB file
# All you need to do is modify the generic "parameters"
# file so that it has the basename for the PDB file (i.e. usually the
# 4-letter PDB code), the chain letter(s) or "_" for
# blank, and any modifications you might want.
# Name the new file appropriately and then run this script:
# ./rungeofold.py myfile.par
# output files will appear in the subdirectories output, tmp, log.
# If these directories do not already exist, they are created.
# The current directory must contain the geofold package,
# installed by unpacking geofold.tgz
# ... then compiled... ????????????????
# cd geofold
# make clean
# make all
# ... that's it.
##
#-----------------------------------------------------
# By modifying the directories below, you can
# run this script and generate HTML output.
# E. Gilbert 03-February-2014
# B. Walcott 11 June 2014

#### COMMAND LINE PARAMETERS ####
import os
import sys
import commands
import time
import pxssh

#The version of dot on bach2 has a bug
#in which circles generated in an imagemap
#are created with a comically large radius.
#This function fixes the imagemap so it can
#be used.

def fixMap(dagMap):
  #print("fixMap")
  tmpMap = open("%s.tmp"%(dagMap),'w+') #creates a tmp file to write the new map to
  try:
    read = open(dagMap,'r') #opens the old map to be fixed
  except IOError:
    print("Couldn't open file %s"%(dagMap))
    #sys.exit()
    return 1
  line = read.readline()  #reads a line from dagMap
  while line!='':       #while not end of file
    newline=line
   # print(newline)
    if len(line.split("circle"))!=1:  #if the line contains code for circle,
      #print("coords found")
      tmp = line.split('coords="')
      newline = tmp[0]+'coords="'
      coords = tmp[1][:-3]
      commaCoords = coords.split(',')
      radius = int(commaCoords[2].strip('"'))-int(commaCoords[0])  #subtract from the value of the 3rd coordinate (radius) the value of the 1st
      newline+='%s,%s,%s"/>\n'%(commaCoords[0],commaCoords[1],radius)
    #print(newline)
    tmpMap.write(newline)
    line = read.readline()
  tmpMap.close()
  read.close()
  commands.getstatusoutput('mv %s.tmp %s'%(dagMap,dagMap))  #replace the old map with the new one
      
    

def getError(output):   #returns True if error returned as part of a function's output
  if "error" in output.lower():
    return True
  return False
  
def tmp2out(tmp,out): #function used to copy htmlTmp to htmlOut so client can see progress of geofold
  writeOut = open(out,'w+')
  tmpRead = open(tmp,'r')
  for line in tmpRead:
    writeOut.write(line+'\n')
  writeOut.write('</pre></body></html>\n')
  writeOut.close()
  
def makeMap(htmlDir,LName): #generates imagemap html file
  mapFile = "%s/%s.dag.map"%(htmlDir,LName) #client-side imagemap created by dot
  dagFile = "%s.dag"%(LName)  #dag generated by geofold
  try:
    mapIn = open(mapFile,'r')
  except IOError:
    print("Couldn't open file %s"%(mapFile))
    sys.exit()
  with mapIn:
    mapOut = open("%s/%s.html"%(htmlDir,dagFile),'w+')
    mapOut.write('<html><body><img src="%s.png" border=0 usemap="#dagmap">\n'%(dagFile))
    mapOut.write('<map name="dagmap">\n')
    for line in mapIn:
      if line.rstrip() != '<map id="FILENAME" name="FILENAME">':
        mapOut.write(line)
    mapOut.write('</body></html>')
    mapOut.close()
    mapIn.close()

def findParam (paramFile, target):  #find parameters in the parameters file
  paramFile.seek(0,0)
  if target == "ORANGE":
    for line in paramFile:
      if target in line:
        s = line.split(' ')
        s.pop(0)
        for i in range(0,len(s)):
          s[i]=s[i].strip(' ')
          s[i]=s[i].strip(',')
          s[i]=s[i].strip('\n')
          if s[i]=='':
            s.pop(i)  
        return s
    return findParam(paramFile,'OMEGA')[1] #if ORANGE not in parameters, set it to OMEGA
  for line in paramFile:
    if target in line:
      s= line.split()
      return s
   
  return [0, '']


  
if len(sys.argv) < 2:
	#### JOB level variable from parameter file ####
	# pdbCode is the basename of a PDB file to be found in TMPDIR
	# chain is a set of chain IDs within the PDB file, or _ for space.
	# LName is a unique name for this job or the process ID
	# OName is a unique name for a previous job, to be used to skip GEOFOLD.
	# UName is a unique name for the current job (or username?)
  print("USAGE: rungeofold.py parametersFile")
  sys.exit()
else:
  #Read parameters from the parameters file
  paramFilename = sys.argv[1]
  try:
    paramFile= open (paramFilename, 'r')
  except IOError:
    print(paramFilename+" could not be opened.")
    sys.exit()
  ##with paramFile:
  try:
    pdbCode= findParam(paramFile, "PDBCODE")[1]
  except LookupError:
    print("PDBCODE line not found.")           
    paramFile.close()
    sys.exit() 
  print("PDBCODE "+pdbCode)
  try:
    chain=  findParam(paramFile, "CHAIN")[1]
  except LookupError:
    print(paramFilename+" chainid not found.")
    paramFile.close()
    sys.exit()
  print("Chain "+chain)
  try:
    LName=  findParam(paramFile, "LNAME")[1]
  except LookupError:
    print(paramFilename+" LNAME value not found.")
    LName= str(os.getpid())
  print("LName " + LName)
  try:
    OName=  findParam(paramFile, "ONAME")[1]
  except LookupError:
    OName=LName
  UName = pdbCode + chain + LName
  print("ONAME "+OName)
  try:
    keyword = findParam(paramFile, "KEYWORD")[1]
  except LookupError:
    keyword = ""

	########################## DIRECTORIES #############################
	### SET THESE DIRECTORIES AS FOLLOWS:
	# gDir is the geofold directory created by tar -zxvf geofold.tgz
	# tmpDir is a temporary file directory. Everything in that
	# directory can be deleted later. The PDB file should be copied
	# to tmpDir to start.
	# logDir is a place to hold the log file.
	# htmlDir is a public_html directory where HTML
	# file may be viewed.
	# jobDir holds job files that are read by geod.csh
	# (not used in this script except to clean up)
	# thisDir is the directory where you are running this script.
	
	
	#Directory settings for server
  thisDir = os.getcwd()
  baseDir = "/bach1/home/bystrc/server/geofold"
  gDir      = baseDir+"/src/geofold"
  bDir      = baseDir+"/bin"
  maskerDir = baseDir+"/src/geofold/masker"
  tmpDir    = baseDir+"/tmp"
  pdbDir    = tmpDir
  logDir    = baseDir+"/log"
  htmlDir   = baseDir+"/output"
  jobDir    = baseDir+"/job"
  paramTemplate= gDir+"/bin/parameters"
	
  baseURL = "http://www.bioinfo.rpi.edu/bystrc/geofold"
  outputURL= "output"
  
  #Directory settings for B. Walcott
  #thisDir   = os.getcwd()
  #baseDir   = thisDir
  #gDir      = baseDir
  #bDir      = baseDir
  #maskerDir = gDir+'/masker'
  #pdbDir    = gDir+'/pdbs'
  #tmpDir    = gDir+'/tmp'
  #tmpDir    = baseDir+"/tmp"
  #logDir    = baseDir+"/log"
  #htmlDir   = baseDir+"/html"
  #jobDir    = baseDir+"/job"
  #paramTemplate=gDir+'/parameters'
  #baseURL='http://bach1.bio.rpi.edu/walcob/geofold'
  #outputURL='html'

	#### FILES ####
  htmlRefresh= "%s/header_refresh.html" %(bDir)
  htmlHead= "%s/header.html" %(bDir)
  htmlTmp= "%s/%s.html" %(tmpDir,LName)
  htmlLog= "%s/%s.log" %(logDir,LName)
  htmlOut= "%s/%s.html" %(htmlDir,LName)
  htmlPerm = "%s/%s.perm" %(tmpDir,LName)

  ###PROGRAMS####
  maxTraffic= gDir+"/maxTraffic"
  mtCut= 0.1
  createGnuplot= bDir+"/creategnuplot.csh"
  convert = "/bach1/usr/bin/convert"
  dot = "/usr/bin/dot"

	#### FILES ####
  htmlRefresh= "%s/header_refresh.html" %(bDir)
  htmlHead= "%s/header.html" %(bDir)
  htmlTmp= "%s/%s.html" %(tmpDir,LName)
  htmlLog= "%s/%s.log" %(logDir,LName)
  htmlOut= "%s/%s.html" %(htmlDir,LName)
  htmlPerm = "%s/%s.perm" %(tmpDir,LName)
  tmpWrite = open(htmlTmp, 'w+')
  permWrite = open(htmlPerm,'w+')


  #### VARIABLES ####
  # omega is the desolvation free energy
  # maxSplit is the maximum number of splits for each intermediate
  #   of unfolding.
  # folding (folding) = 1 is folding, 0 is unfolding
  # halflife = 1 for stopping at the half-life, 0 to go to
  #equilibrium in Unfoldsim

  #variable parameters
  try:
    folding= findParam (paramFile, "FING")[1]
  except LookupError:
    folding = 0
  try:
    halflife= findParam (paramFile, "HLFE")[1]
  except LookupError:
    halflife = 0
  try:
    bCut= findParam (paramFile, "BCUT")[1]
  except LookupError:
    print("BCUT not found")
    sys.exit()
  try:
    pCut= findParam (paramFile, "PCUT")[1]
  except LookupError:
    print("PCUT not found")
    sys.exit()
  try:
    hCut= findParam (paramFile, "HCUT")[1]
  except LookupError:
    print("HCUT not found")
    sys.exit()
  try:
    wat= findParam (paramFile, "WAT")[1]
  except LookupError:
    print("WAT not found")
    sys.exit()
  try:
    voids= int(float(findParam (paramFile, "VOIDENTROPY")[1]))
  except LookupError:
    print("VOIDENTROPY not found")
    paramUsage()
    sys.exit()
  omegaRange= findParam (paramFile, "ORANGE")
  print("ORANGE ",omegaRange)
  try:
    maxSplit = findParam (paramFile, "MAXSPLIT")[1]    
  except LookupError:
    maxSplit = 4
  try:
    doIt = bool(int(findParam (paramFile, "RUNGEOFOLD")[1]))
  except LookupError:
    doIt = True
  print("doIt: %s"%(doIt))
  if doIt :
    print "Running  GEOFOLD"
  else:
    print "Skipping GEOFOLD"
    refresh = "cat %s > %s" %(htmlRefresh,htmlTmp)
    commands.getstatusoutput(refresh)
    tmpWrite.write("<h3>Skipping GeoFOLD. UnfoldSim results for " + UName + "</h3><br>")		
    tmpWrite.write("<h4>Using previously calculated DAG file " + OName + " </h4><br>")
    tmpWrite.write("<pre><br>")
    tmp2out(htmlTmp,htmlOut)
    tmpWrite.write("</body></html>")
    if OName == UName:
      print("ERROR Need old job name as arg 4 to skip geofold.")     
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    cp = "cp %s/%s.dag %s/%s.dag" %(tmpDir,OName,tmpDir,LName)
    commands.getstatusoutput(cp)
  #paramFile.close()
  if doIt :
    print("============= PARAMETERS =============")
    tmpWrite.write("============= PARAMETERS =============<br>")  
#      if os.path.getsize(paramFile)==0:
#        tmpWrite.write("Parameters file is empty!!\n")
#        sys.exit()
    tmpWrite.write("Using these parameters<br>")
    for line in paramFile:
      tmpWrite.write(line+'<br>')
    paramFile.close()
    tmp2out(htmlTmp,htmlOut)
    print("============= GETCHAIN =============")
    tmpWrite.write("============= GETCHAIN =============<br>")
    pdbFile = "%s/%s.pdb" %(pdbDir,pdbCode)
#      if not os.path.isfile(pdbFile):
#        print("File not found: %s\n" %(pdbFile))
#        sys.exit()
    tmpWrite.write("Extracting protein atoms from %s<br>" %(pdbCode))
    getProtein = "%s/xgetchain + < %s/%s.pdb > %s/%s.tmp" %(gDir,pdbDir,pdbCode,tmpDir,LName)
    status,output = commands.getstatusoutput(getProtein)
    #print(output)
    if status != 0 or getError(output):
      tmpWrite.write("Error in GETCHAIN<br>")
      print("Error in GETCHAIN")
      print(output)     
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    tmpWrite.write("Extracting chains %s<br>" %(chain))
    getChains = "%s/xgetchain %s < %s/%s.tmp > %s/%s.pdb" %(gDir,chain,tmpDir,LName,tmpDir,LName)
    status, output = commands.getstatusoutput(getChains)
    #print(output)
    if status != 0 or getError(output):
      tmpWrite.write("Error in GETCHAIN<br>")
      print("Error in GETCHAIN")
      print(output)     
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    tmp2out(htmlTmp,htmlOut)
    print("============= RENUMBER =============" )
    tmpWrite.write("============= RENUMBER =============<br>" )
    LNamePDB = "%s/%s.pdb" %(tmpDir,LName)
#      if not os.path.isfile(LNamePDB):
#        print("File not found: %s\n" %(LNamePDB))
#        sys.exit()
    renumberOne = "%s/xrenumber_one %s %s/%s.tmp" %(gDir,LNamePDB,tmpDir,LName)
    status, output = commands.getstatusoutput(renumberOne)
    #print(output)
    if status != 0 or getError(output):
      tmpWrite.write("Error in renumber_one<br>")
      print("Error in renumber_one") 
      print(output)    
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    mv = "mv %s/%s.tmp %s" %(tmpDir,LName,LNamePDB)
    commands.getstatusoutput(mv)
    cp = "cp %s %s/%s.pdb" %(LNamePDB,htmlDir,LName)
    commands.getstatusoutput(cp)
#      if os.path.getsize(LNamePDB)==0:
#        tmpWrite.write("Error. empty file.\n")
#        tmp2out(htmlTmp,htmlOut)
    print("============= 3to1 (extract sequence) =============")
    tmpWrite.write("============= 3to1 (extract sequence) =============<br>")
    x3to1 = "%s/x3to1 + < %s > %s/%s.seq" %(gDir,LNamePDB,tmpDir,LName)
    status, output = commands.getstatusoutput(x3to1)
    if status != 0 or getError(output):
      tmpWrite.write("3to1 ended with errors.,<br>")
      print("3to1 ended with errors.") 
      print(output)    
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    tmpWrite.write("Complete sequence (all chains ) is<br>")
    seqFile = open("%s/%s.seq"%(tmpDir,LName))
    for line in seqFile:
      tmpWrite.write(line+'<br>')
    seqFile.close()
    tmp2out(htmlTmp,htmlOut)
    print("============= PDB2CIJ (extract contacts) =============")
    tmpWrite.write("============= PDB2CIJ (extract contacts) =============<br>")
    pdb2cij = "%s/xpdb2cij %s 8. > %s/%s.cij" %(gDir,LNamePDB,tmpDir,LName)
    status, output = commands.getstatusoutput(pdb2cij)
    if status != 0 or getError(output):
      tmpWrite.write("Error in PDB2CIJ<br>")
      print("Error in PDB2CIJ")
      print(output)     
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    tmpWrite.write("Number of contacts found: <br>")
    writeNumContacts = "wc -l %s/%s.cij | awk '{print $1}'>>\& %s" %(tmpDir,LName,htmlTmp)
    status,output = commands.getstatusoutput(writeNumContacts)
    tmp2out(htmlTmp,htmlOut)
    print("============= PDB2HB (extract H-bonds SS-bonds) =============")
    tmpWrite.write("============= PDB2HB (extract H-bonds SS-bonds) =============<br>")
    pdb2hb = "%s/xpdb2hb %s %s > %s/%s.hb" %(gDir,paramFilename,LNamePDB,tmpDir,LName)
    status, output = commands.getstatusoutput(pdb2hb)
    if status != 0 or getError(output):
      tmpWrite.write("Error in PDB2HB<br>")
      print("Error in PDB2HB")  
      print(output)   
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    writeParam = "echo HBONDS %s/%s.hb >> %s" %(tmpDir,LName,paramFilename)
    commands.getstatusoutput(writeParam)
    print("============= CONTACTMASK =============")
    tmpWrite.write("============= CONTACTMASK =============<br>")
    writeTime = "Time before running CONTACTMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    
    ##masker setup
    os.environ['MASKERDIR']=maskerDir
    os.environ['DESIGN_HOME']=os.environ['MASKERDIR']
    os.environ['MSIZE']="512"
    os.environ['DTHETA']="9.0"
    os.environ['MASKLIB']="%s/%s.mask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VMASK']="%s/%s.vmask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VTRIANGLE']="%s/%s.tri" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKTEMPLATE']="%s/%s.sort" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKDAT']="%s/%s.dat" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['ATOMLIB']="%s/atoms.lib" %(os.environ['MASKERDIR'])
    os.environ['COUNTBITS']="%s/cbits.bin" %(os.environ['MASKERDIR'])
    os.environ['COLLARS']="%s/collars%s.bin" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['SLOPES']="%s/slopes%s.dat" %(os.environ['MASKERDIR'],os.environ['DTHETA'])
    os.environ['FORCEFIELD']="%s/gromacs_ff.prm" %(os.environ['MASKERDIR'])
    
    contactmask = "%s/xcontactmask %s %s/%s.sas 1.4" %(maskerDir,LNamePDB,tmpDir,LName)
    status,output = commands.getstatusoutput(contactmask)
    if status != 0 or getError(output):
      tmpWrite.write("Error in CONTACTMASK<br>")
      print("Error in CONTACTMASK")   
      print(output)  
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    writeTime = "Time after running CONTACTMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    cp = "cp %s/%s.sas %s/%s.sas" %(tmpDir,LName,htmlDir,LName)
    commands.getstatusoutput(cp)
    line = 'Pairwise contact surfaces <a href = "\'%s.sas\'">file.</a><br>' %(LName)
    tmpWrite.write(line)
    tmp2out(htmlTmp,htmlOut)
    writeParam = "echo CONTACTS %s/%s.sas >> %s" %(tmpDir,LName,paramFilename)
    commands.getstatusoutput(writeParam)
    print("============= PDB2SEAMS (extract seams) =============")
    tmpWrite.write("============= PDB2SEAMS (extract seams) =============<br>")
    pdb2seams = "%s/seams/xpdb2seams %s %s/%s.sas > %s/%s.seams" %(gDir,LNamePDB,tmpDir,LName,tmpDir,LName)
    os.environ['GDIR']=gDir
    status, output = commands.getstatusoutput(pdb2seams)
    #print(output)
    if status != 0 or getError(output):
      tmpWrite.write("Error in PDB2SEAMS<br>")
      print("Error in PDB2SEAMS")  
      print(output)   
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    writeParam = "echo SEAMS %s/%s.seams >> %s" %(tmpDir,LName,paramFilename)
    commands.getstatusoutput(writeParam)
    print("============= VOIDMASK =============")
    tmpWrite.write("============= VOIDMASK =============<br>")
    
    
    writeTime = "Time before running VOIDMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    
    ##masker setup
    os.environ['MASKERDIR']=maskerDir
    os.environ['DESIGN_HOME']=os.environ['MASKERDIR']
    os.environ['MSIZE']="512"
    os.environ['DTHETA']="9.0"
    os.environ['MASKLIB']="%s/%s.mask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VMASK']="%s/%s.vmask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VTRIANGLE']="%s/%s.tri" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKTEMPLATE']="%s/%s.sort" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKDAT']="%s/%s.dat" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['ATOMLIB']="%s/atoms.lib" %(os.environ['MASKERDIR'])
    os.environ['COUNTBITS']="%s/cbits.bin" %(os.environ['MASKERDIR'])
    os.environ['COLLARS']="%s/collars%s.bin" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['SLOPES']="%s/slopes%s.dat" %(os.environ['MASKERDIR'],os.environ['DTHETA'])
    os.environ['FORCEFIELD']="%s/gromacs_ff.prm" %(os.environ['MASKERDIR'])
    
    if voids != 0  :
      voidmask = "%s/xvoidmask %s %s/%s.void.pdb 1.4 1.2 1.4" %(maskerDir,LNamePDB,tmpDir,LName)
      status,output = commands.getstatusoutput(voidmask)
      if status != 0 or getError(output):
        tmpWrite.write("Error in VOIDMASK<br>")
        print("Error in VOIDMASK")  
        print(output)   
        paramFile.close()
        permWrite.close()         
        tmpWrite.close()
        sys.exit()
      cp = "cp %s/%s.void.pdb %s/%s.void.pdb" %(tmpDir,LName,htmlDir,LName)
      commands.getstatusoutput(cp)
    else:
      cp = "cp %s/%s.pdb %s/%s.void.pdb" %(tmpDir,LName,tmpDir,LName)
      commands.getstatusoutput(cp)
      cp = "cp %s/%s.pdb %s/%s.void.pdb" %(tmpDir,LName,htmlDir,LName)
      commands.getstatusoutput(cp)
    writeTime = "Time after running VOIDMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
#      if os.path.getsize(voidfile)==0:
#        tmpWrite.write("ERROR in VOIDMASK. Empty file.")
#        tmp2out(htmlTmp,htmlOut)
#        sys.exit()
    line = 'Coordinates with void positions: <a href="\'%s.void.pdb\'"> %s.void.pdb </a><br>' %(LName,LName)
    tmpWrite.write(line)
    tmp2out(htmlTmp,htmlOut)
    print("============= GEOFOLD =============")
    tmpWrite.write("============= GEOFOLD =============<br>")
    writeTime = "Time before running GEOFOLD "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    geofold = "%s/xgeofold %s/%s.void.pdb %s/%s.dag %s" %(gDir,tmpDir,LName,tmpDir,LName,paramFilename)
    print geofold
    status,output = commands.getstatusoutput(geofold)
    if status != 0 or getError(output):
      tmpWrite.write("Error in GEOFOLD<br>")
      print("Error in GEOFOLD")   
      print(output)  
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    writeTime = "Time after running GEOFOLD "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    dagFile = "%s/%s.dag" %(tmpDir,LName)
#      if os.path.getsize(dagFile)==0:
#        tmpWrite.write("ERROR in GEOFOLD. Empty file.\n")
#        tmp2out(htmlTmp,htmlOut)
#        sys.exit()
    cp = "cp %s/%s.dag %s/%s.dag" %(tmpDir,LName,htmlDir,LName)
    commands.getstatusoutput(cp)
    line = 'Directed acyclic graph (DAG) <a href="\'%s.dag\'">file.</a><br>' %(LName)
    tmpWrite.write(line)
    tmp2out(htmlTmp,htmlOut)
  ##SKIPGEOFOLD
  LNamePDB = "%s/%s.pdb" %(tmpDir,LName)
  print("============= UNFOLDSIM =============")
  tmpWrite.write("Unfolding %s%s<br>" %(pdbCode,chain))
  tmpWrite.write("============= UNFOLDSIM =============<br>")
  nn = 0
  for value in omegaRange:
    nn += 1
    cp = "cp %s/%s.dag %s/%s_%s.dag" %(tmpDir,LName,tmpDir,LName,nn)
    print cp
    commands.getstatusoutput(cp)
    sed = "sed -e \"s/^OMEGA .*/OMEGA %s/\" %s > %s.1" %(value,paramFilename,paramFilename)
    status,output=commands.getstatusoutput(sed)
    logFile = "%s/%s_%s.log" %(tmpDir,LName,nn)
    print("============= run %s omega = %s =============" %(nn,value))
    tmpWrite.write("============= run %s omega = %s =============<br>" %(nn,value))
    writeTime = "Time before running UNFOLDSIM "+time.strftime("%c") +'<br>'
    tmpWrite.write(writeTime)
    unfoldsim = "%s/xunfoldsim %s/%s_%s.dag %s.1 > %s" %(gDir,tmpDir,LName,nn,paramFilename,logFile)
    log = open(logFile,'w+')
    #debugging.  running with output
    unfoldsim = "%s/xunfoldsim %s/%s_%s.dag %s.1" %(gDir,tmpDir,LName,nn,paramFilename)
    print(unfoldsim)
    tmpWrite.write(unfoldsim+'<br>')
    status,output = commands.getstatusoutput(unfoldsim)
    print(output)
    log.write(output)
    log.close()
    if status != 0 or getError(output):
      tmpWrite.write("ERROR when running UNFOLDSIM<br>")
      print("ERROR when running UNFOLDSIM")     
      print(output)
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    writeTime = "Time after running UNFOLDSIM "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    tmpWrite.write("<p><pre><br>")
    grep = "grep ^\"TIMECOURSE\" %s | tail -1 >>\& %s" %(logFile,htmlTmp)
    commands.getstatusoutput(grep)
    tmp2out(htmlTmp,htmlOut)
  print("============= PATHWAY2PS =============")
  tmpWrite.write("============= PATHWAY2PS =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    pathway2ps = "%s/xpathway2ps %s/%s.seq %s/%s_%s.dag.path %s/%s.cij %s/%s_%s.ps 4" %(gDir,tmpDir,LName,tmpDir,LName,nn,tmpDir,LName,tmpDir,LName,nn)
    tmpWrite.write(pathway2ps+'<br>')
    status,output = commands.getstatusoutput(pathway2ps)
    print(output)
    tmpWrite.write(output+'<br>')
    tmp2out(htmlTmp,htmlOut)
  print("============= CONVERT =============")
  tmpWrite.write("============= CONVERT =============<br>")
  nn=0
  for value in omegaRange:
    nn+=1
    runConvert = "%s -trim -geometry 100 %s/%s_%s.ps %s/%s_%s_thumb.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    commands.getstatusoutput(runConvert)
    runConvert = "%s %s/%s_%s_thumb.gif %s/%s_%s_thumb.jpg" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    commands.getstatusoutput(runConvert)
    runConvert = "%s -trim -geometry 600 %s/%s_%s.ps %s/%s_%s.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    commands.getstatusoutput(runConvert)
    runConvert = "%s %s/%s_%s.gif %s/%s_%s.jpg" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    commands.getstatusoutput(runConvert)
    
  ##DOT must be installed for the following to work
#    if not os.path.isfile(dot):
#      print("Dot must be installed in order to generate the DAG image")
#    else:
  print("============= MAXTRAFFIC =============")
  tmpWrite.write("============= MAXTRAFFIC =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    runMaxTraffic = "%s %s/%s_%s.dag.out %s > %s/%s_%s.dot" %(maxTraffic,tmpDir,LName,nn,mtCut,tmpDir,LName,nn)
    #debugging
    #  runMaxTraffic = "%s %s/%s_%s.dag.out %s" %(maxTraffic,tmpDir,LName,nn,mtCut)
    tmpWrite.write(runMaxTraffic+'<br>')
    status,output = commands.getstatusoutput(runMaxTraffic)
    dotOut = open("%s/%s_%s.dot"%(tmpDir,LName,nn),'w+')
    dotOut.write(output)
    dotOut.close()
  print("============= DOT =============")
  tmpWrite.write("============= DOT =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    #if running from bach1
    #runDot = "%s -Tcmapx -Gdpi=100 -Gsize=6,15 -o %s/%s.%s.dag.map %s/%s.%s.dot" %(dot,htmlDir,LName,value,tmpDir,LName,value)
    #bach2
    runDot = "%s -Gdpi=100 -Gsize=6,100 -Tcmapx  -o %s/%s_%s.dag.map %s/%s_%s.dot" %(dot,htmlDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runDot+'<br>')
    status,output=commands.getstatusoutput(runDot)
    #print(status,output)
    fixMap('%s/%s_%s.dag.map'%(htmlDir,LName,nn))
    runDot = "%s -Tps -o %s/%s_%s.dot.ps %s/%s_%s.dot" %(dot,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runDot+'<br>')
    commands.getstatusoutput(runDot)
  print("============= CONVERT =============")
  tmpWrite.write("============= CONVERT =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    runConvert = "%s -trim -geometry 100 %s/%s_%s.dot.ps  %s/%s_%s.dag_thumb.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    commands.getstatusoutput(runConvert)
    runConvert = "%s %s/%s_%s.dag_thumb.gif %s/%s_%s.dag_thumb.jpg" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    commands.getstatusoutput(runConvert)
    #using bach1
    runConvert = "%s -trim -geometry 600 %s/%s_%s.dot.ps %s/%s_%s.dag.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    #using bach2
    #runConvert = "%s -trim -geometry 60%% %s/%s_%s.dot.ps %s/%s_%s.dag.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    #runConvert = "%s -trim  %s/%s_%s.dot.ps %s/%s_%s.dag.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')    
    commands.getstatusoutput(runConvert)
    runConvert = "%s %s/%s_%s.dag.gif %s/%s_%s.dag.png" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    status,output=commands.getstatusoutput(runConvert)
    #print(status,output)
  #################### CREATE FINAL OUTPUT HTML FILE ##########################
  nn = 0
  for value in omegaRange:
    nn+=1
    LNameValue = "%s_%s"%(LName,nn)
    makeMap(htmlDir,LNameValue)
  ## Main output page
  headPerm = "cat %s > %s" %(htmlHead, htmlPerm)
  commands.getstatusoutput(headPerm)
  cp = "cp %s %s/" %(LNamePDB,htmlDir)
  commands.getstatusoutput(cp)
  cp = "cp %s/%s.seq %s/" %(tmpDir,LName,htmlDir)
  commands.getstatusoutput(cp)
  line='<table width="80%">\n<tr>'
  permWrite.write(line)
  tmpWrite.write(line)
  nn=0
  for value in omegaRange:
    nn+=1
    line = '<td><h3>Unfolding Age plot for %s%s, omega=%s </h3><a href ="%s_%s.jpg"><img src="%s_%s_thumb.jpg" alt="%s_%s_thumb"></a></td>' %(pdbCode,chain,value,LName,nn,LName,nn,LName,nn)
    permWrite.write(line)
    tmpWrite.write(line)
  permWrite.write('</tr>\n<tr>')
  tmpWrite.write('</tr>\n<tr>')
  nn = 0
  for value in omegaRange:
    nn+=1
    line = '<td><h3>Unfolding Pathway plot for %s%s, omega=%s </h3><a href ="%s_%s.dag.html"><img src="%s_%s.dag_thumb.jpg" alt="%s_%s_thumb"></a></td>' %(pdbCode,chain,value,LName,nn,LName,nn,LName,nn)
    permWrite.write(line)
    tmpWrite.write(line)
  permWrite.write('</tr>\n<tr>')
  tmpWrite.write('</tr>\n<tr>')
  nn=0
  for value in omegaRange:
    nn+=1
    line = '<td><h3><a href ="%s_%s.dag">Unfolding graph (text file) for %s%s, omega=%s </a></h3></td>' %(LName,nn,pdbCode,chain,value)
    permWrite.write(line)
    tmpWrite.write(line)
  permWrite.write('</tr></table>')
  tmpWrite.write('</tr></table>')    
  line = '<h3><a href="%s.pdb">Coordinate file (%s%s) used for this simulation</a></h3><br>' %(LName,pdbCode,chain)
  permWrite.write(line)
  tmpWrite.write(line)
  permWrite.write('<h3> Sequence (all chains)</h3><br>')
  tmpWrite.write('<h3> Sequence (all chains)</h3><br>')
  permWrite.write('<pre>\n')
  tmpWrite.write('<pre>\n')
  seqFile = open("%s/%s.seq"%(tmpDir,LName))
  for line in seqFile:
    permWrite.write(line+'<br>')
    tmpWrite.write(line+'<br>')
  seqFile.close()
  #cat = "cat %s/%s.seq >> %s" %(tmpDir,LName,htmlPerm)
  #commands.getstatusoutput(cat)
  #cat = "cat %s/%s.seq >> %s" %(tmpDir,LName,htmlTmp)
  #commands.getstatusoutput(cat)
  tmp2out(htmlTmp,htmlOut)
  
  #### Output unfolding rates at different omega values ####
  permWrite.write('</pre>\n')
  tmpWrite.write('</pre>\n')
  permWrite.write('<h4>')
  tmpWrite.write('<h4>')
  if halflife == 1:
    if folding == 1:
      permWrite.write("Times and concentrations at 1/2 folded<br>")
      tmpWrite.write("Times and concentrations at 1/2 folded<br>")
    else:
      permWrite.write("Times and concentrations at 1/2 unfolded<br>")
      tmpWrite.write("Times and concentrations at 1/2 unfolded<br>")
  else:
    if folding == 1:
      permWrite.write("Equilibrium concentrations and rates under folding conditions<br>")
      tmpWrite.write("Equilibrium concentrations and rates under folding conditions<br>")
    else:
      permWrite.write("Equilibrium concentrations and rates under unfolding conditions<br>")
      tmpWrite.write("Equilibrium concentrations and rates under unfolding conditions<br>")
  permWrite.write("<p><pre>\n")
  tmpWrite.write("<p><pre>\n")
  permWrite.write("dGsolvation  ")
  tmpWrite.write("dGsolvation  ")
  permWrite.write("   time(sec)   final[F]  final[U]  final[I]  sum[c](ppb) half_life(sec)<br>")
  tmpWrite.write("   time(sec)   final[F]  final[U]  final[I]  sum[c](ppb) half_life(sec)<br>")
  nn = 0
  plotFile = open("%s/%s.plot"%(tmpDir,LName),'w+')
  for value in omegaRange:
    nn += 1
    logFile = "%s/%s_%s.log" %(tmpDir,LName,nn)
    permWrite.write("%s kJ/mol/A^2  " %(value))
    tmpWrite.write("%s kJ/mol/A^2  " %(value))
    grep = 'grep ^"TIMECOURSE" %s | tail -1 | sed -e "s/TIMECOURSE//"' %(logFile)
    status,output = commands.getstatusoutput(grep)
    permWrite.write(output)
    tmpWrite.write(output)
    grep = 'grep ^"TIMECOURSE" %s | awk \'$4<50.\' | tail -1 | awk -v omega=%s. \'{print omega, log(log(2)/$2)}\'' %(logFile,omegaRange[0])
    status,output = commands.getstatusoutput(grep)
    tmp = output.split('. ')
    tmp[0]=' %s ' %(value)
    output = tmp[0]+tmp[1]
    plotFile.write(output+'\n')
    tmpWrite.write(output+'<br>')
    permWrite.write(output+'<br>')
  plotFile.close()
  permWrite.write('</pre>\n')
  tmpWrite.write('</pre>\n')
  tmp2out(htmlTmp,htmlOut)

  
  print("============= FIT_POLY =============")
  tmpWrite.write('<pre>\n')
  fit_poly = "%s/xfit_poly %s/%s.plot 1 %s/%s.fit >>\& %s" %(gDir,tmpDir,LName,tmpDir,LName,htmlTmp)
  fit_poly = "%s/xfit_poly %s/%s.plot 1 %s/%s.fit" %(gDir,tmpDir,LName,tmpDir,LName)
  status,output = commands.getstatusoutput(fit_poly)
  ic = 'grep -A 2 "Least-squares" %s/%s.fit | tail -1 | awk \'{print $2}\'' %(tmpDir,LName)
  status,output = commands.getstatusoutput(ic)
  ic = output
  sl = 'grep -A 3 "Least-squares" %s/%s.fit | tail -1 | awk \'{print $2}\'' %(tmpDir,LName)
  status, output = commands.getstatusoutput(sl)
  sl = output
  lnku = 'awk -v OM=%s -v sl=%s -v ic=%s \'BEGIN{print sl*OM + ic}\'' %(wat,sl,ic)
  status,output = commands.getstatusoutput(lnku)
  lnku=output
  tmp2out(htmlTmp,htmlOut)
  tmpWrite.write('</pre>\n')    
  permWrite.write("<h5>Projected half-life of unfolding in pure water (dGsolvation=%s kJ/mol/A^2) : " %(wat))
  tmpWrite.write("<h5>Projected half-life of unfolding in pure water (dGsolvation=%s kJ/mol/A^2) : " %(wat))
  awk = 'awk -v lnku=%s \'BEGIN{printf "%%e", log(2)/exp(lnku)}\'' %(lnku)
  status,output = commands.getstatusoutput(awk)
  permWrite.write(output)
  tmpWrite.write(output)
  permWrite.write(" seconds</h5><br>\n")
  tmpWrite.write(" seconds</h5><br>\n")
  #### Create gnuplot image
  run_gnuplot = "csh %s %s/%s %s" %(createGnuplot,tmpDir,LName,wat)
  status,output=commands.getstatusoutput(run_gnuplot)
  runConvert = "%s -trim %s/%s.gp.ps %s/%s.gp.gif" %(convert,tmpDir,LName,tmpDir,LName)
  status,output = commands.getstatusoutput(runConvert)
  runConvert = "%s %s/%s.gp.gif %s/%s.gp.jpg" %(convert,tmpDir,LName,htmlDir,LName)
  commands.getstatusoutput(runConvert)
  runConvert = "%s -trim -geometry 100 %s/%s.gp.ps %s/%s.gp_thumb.gif" %(convert,tmpDir,LName,tmpDir,LName)
  commands.getstatusoutput(runConvert)
  runConvert = "%s %s/%s.gp_thumb.gif %s/%s.gp_thumb.jpg" %(convert,tmpDir,LName,htmlDir,LName)
  commands.getstatusoutput(runConvert)
  line = '<h4>ln(ku) vs omega for %s%s </h4><a href="%s.gp.jpg"><img src="%s.gp_thumb.jpg" alt="%s.gp.jpg"></a><br>\n' %(pdbCode,chain,LName,LName,LName)
  tmpWrite.write(line)
  permWrite.write(line)
  line = "<br>Completed "+time.strftime("%c")+"<br>\n"
  tmpWrite.write(line)
  permWrite.write(line)
  ######Create "do over" button
  line = '<FORM METHOD="POST" ACTION="../geofold.cgi" >\n'
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="email_address" value="%s@rpi.edu">\n' %(UName)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="pdbid" value="%s">\n' %(pdbCode)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="chains" value="%s">\n' %(chain)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="parameters" value="%s">\n' %(paramFile)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="slash" value="/">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="space" value=" ">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="plus" value="+">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="lname" value="%s">\n' %(LName)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<p><INPUT TYPE="submit" NAME=".submit" VALUE="Do over">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  tmpWrite.write('</FORM>\n')
  tmp2out(htmlTmp,htmlOut)
  line = 'based on <a href="%s/%s/%s.html">%s</a>\n' %(baseURL,outputURL,LName,LName)
  permWrite.write(line)
  permWrite.write('</FORM>\n')
  #####BACK button
  permWrite.write('<h3><a href="../server.php">Back to GeoFold server</a></h3><br>\n')
  permWrite.write('</body></html>\n')
  permWrite.close()
  cp = "cp -v %s %s" %(htmlPerm,htmlOut)
  status,output=commands.getstatusoutput(cp)
  paramFile.close()   
  tmpWrite.close()
  nn=0
  for value in omegaRange:
    nn+=1
    commands.getstatusoutput("cp %s/%s_%s.dag.out %s/%s_%s.dag.out"%(tmpDir,LName,nn,gDir,LName,nn))



