#!/bach1/usr/local/bin/python
""" RUNGEOFOLD.py 
This script runs the GeoFOLD suite of programs
It is a copy of the orginal C Shell server written by Dr. Chris Bystroff
The input files are (1) a parameters file and (2) a PDB file
All you need to do is modify the generic "parameters"
file so that it has the basename for the PDB file (i.e. usually the
4-letter PDB code), the chain letter(s) or "_" for
blank, and any modifications you might want.
Name the new file appropriately and then run this script:
./rungeofold.py myfile.par
output files will appear in the subdirectories output, tmp, log.
If these directories do not already exist, they are created.
The current directory must contain the geofold package,
installed by unpacking geofold.tgz
... then compiled... ????????????????
cd geofold
make clean
make all
... that's it.

-----------------------------------------------------
By modifying the directories below, you can
run this script and generate HTML output.
E. Gilbert 03-February-2014
B. Walcott 11 June 2014 """

# NOTE: If running this using python version 3, 
# replace all occurrences of the commands module with subprocess

#### COMMAND LINE PARAMETERS ####
import os
import os.path
import sys
import commands
import time
import math

#generate the molscript movie
def makeMolScript(mol, toDir = ' '):
  #programs used
  convert = '/bach1/usr/bin/convert'
  molScript = '/bach1/home/bystrc/bin/molscript'
  molAuto = '/bach1/home/bystrc/bin/molauto'
  
  print("makeMolScript")
  
  
  #run molAuto
  status,output = commands.getstatusoutput('%s -nice %s.pdb > %s.mol'%(molAuto,mol,mol))
  #error check
  if status != 0:
    return [status,output]
  #open the file created by molAuto and set gg = the line number of the "transform atom" line
  try:
    molOut = open('%s.mol'%(mol),'r')
  except IOError:
    return [1,"Couldn't open file %s.mol"%(mol)]
  gg = 0
  count = 0
  for line in molOut:
    count += 1
    if "transform atom" in line:
      gg = count
  hh = gg+1 ##hh is the line where the secondary structure data starts being stored
  ##nn, sw, and tlt are used to move the molecule around in the gif created
  sw = 25
  tlt = 0  
  nn = 0
  while nn < 360:
    mm = 10000 + nn
    #write the first gg lines of mol.mol to mol.mm
    mmFile = open('%s.%s'%(mol,mm),'w+')
    molOut.seek(0,0)
    for i in range(0,gg):
      mmFile.write(molOut.readline())      
    mmFile.write(" transform atom * by rotation z %s.;\n"%(tlt))
    mmFile.write(" transform atom * by rotation y %s.;\n"%(sw))
    mmFile.write(" transform atom * by rotation z -%s.;\n"%(tlt))
    mmFile.write(" transform atom * by rotation y %s.;\n"%(nn))
    
    #use hh to output structure data from molOut to mmFile
    molOut.seek(0,0)
    lines = []
    for line in molOut:
      lines.append(line)
    for i in range(hh,len(lines)):
      while 'end_plot' not in lines[i]:
        mmFile.write(lines[i])
        i += 1      
    mmFile.write('set bonddistance 2.2;\n')
    mmFile.write('ball-and-stick require in type CYS and either atom CA, atom CB or atom SG ;\n')
    #write last line of mol.mol to mol.mm
    mmFile.write(lines[len(lines)-1])
    mmFile.close()
    #run molscript on mol.mm
    status,output = commands.getstatusoutput('%s < %s.%s > %s.%s.ps'%(molScript,mol,mm,mol,mm))
    if status != 0:
      return [status,output]
    nn += 5
    tlt += 5
  molOut.close()
  gif = '%s.gif'%(mol)
  runConvert = '%s -trim -delay 20 -geometry 300x300 %s.1????.ps %s'%(convert,mol,gif)
  status,output = commands.getstatusoutput(runConvert)
  if status != 0:
    return [status,output]
  if toDir != ' ':
    commands.getstatusoutput('mv %s %s'%(gif,toDir))
    
  #cleanup
  commands.getstatusoutput('rm -f %s.1????.ps %s.1????'%(mol,mol))
  return [0,'']

#gets the number of hydrogen and disulfide bonds from the hbfile
#returns a tuple of the # of h-bonds and disulfide bonds
#Used for the final HTML output
def getHS(LName):
  try:
    hbFile = open("%s.hb"%(LName),'r')
  except IOError:
    print("Couldn't open %s.hb"%(LName))
    return [-1,-1]
  h = 0
  s = 0
  for line in hbFile:
    if line[0] != '!':
      line = line.split()
      if line[4] == 'H':
        h += 1
      if line[4] == 'S':
        s += 1
  return [h,s]
  
  
#plots the lnku
def createGnuplot(LName, wat):
  #initial gnuplot setup
  os.environ['GNUHELP']='/bach1/usr/local/share/gnuplot/4.2/gnuplot.gih'
  os.environ['GNUPLOT_PS_DIR']='/bach1/usr/local/share/gnuplot/4.2/PostScript'
  gnuplot = '/bach1/usr/local/bin/gnuplot'
  
  print("createGnuplot")
  try:
    inFile = open("%s.fit"%(LName),'r')
  except IOError:
    return [1,"File not found: %s.fit"%(LName)]
  ##assign bb and mm
  line = inFile.readline()
  while "Least-squares coefficients" not in line:
    line = inFile.readline()
  line = inFile.readline()
  bb = inFile.readline()
  mm = inFile.readline()
  bb = bb.split()
  mm = mm.split()
  bb = bb[1]
  mm = mm[1]
  #open output file
  try:
    gnuOut = open("%s.gnu"%(LName),'w+')
  except IOError:
    return [1,"Couldn't open file %s.gnu"%(LName)]
  #initial gnuplot settings
  gnuOut.write('set terminal postscript enhanced portrait\n')
  gnuOut.write('set size 1.4,0.7\n')
  gnuOut.write('set output "%s.gp.ps"\n'%(LName))
  gnuOut.write('set encoding iso_8859_1\n') #allows for the use of special characters in gnuplot
  #{\305} = angstrom symbol {/Symbol \167} = omega
  gnuOut.write('set xlabel "desolvation energy, {/Symbol \167} (kJ/mol/{\305}^2)"\n')
  gnuOut.write('set ylabel "unfolding rate, ln(k_u) s^{-1}"\n')
  gnuOut.write('set pointsize 2\n')
  #Cosmetics
  gnuOut.write('set style line 80 lt rgb "#808080"\n')
  gnuOut.write('set style line 81 lt 0\n')
  gnuOut.write('set style line 81 lt rgb "#808080"\n')
  gnuOut.write('set grid back linestyle 81\n')
  gnuOut.write('set border 3 back linestyle 80\n')
  gnuOut.write('set xtics nomirror\n')
  gnuOut.write('set ytics nomirror\n')
  gnuOut.write('set key right\n')
  #The line that actually tells gnuplot what to plot
  gnuOut.write('p "%s.plot" w p pt 7, %s + %s*x\n'%(LName,bb,mm))
  gnuOut.close()
  status,output = commands.getstatusoutput("%s < %s.gnu"%(gnuplot,LName))
  return [status,output]
  
  

#plots the unfolding timecourse
def plotTimeCourse(LName,nn):
  print("plotTimeCourse")
  #initial setup
  try:
    gnuOut = open("%s_%s.tc.gnu"%(LName,nn),'w+')
  except IOError:
    return [1,"Couldn't open file %s_%s.tc.gnu"%(LName,nn)]
  # All info for this plot is read from the LName_nn.log file
  try:
    inFile = open("%s_%s.log"%(LName,nn),'r')
  except IOError:
    gnuOut.close()
    return [1,"Couldn't open file %s_%s.log"%(LName,nn)]
  #gnuplot environmental variables
  os.environ['GNUPLOT_PS_DIR'] = '/bach1/usr/local/share/gnuplot/4.2/PostScript'
  os.environ['GNUHELP'] = '/bach1/usr/local/share/gnuplot/4.2/gnuplot.gih'
  #gnuplot program itself
  gnuplot = '/bach1/usr/local/bin/gnuplot'
  #initial gnuplot settings
  gnuOut.write('set terminal postscript enhanced portrait\n')
  gnuOut.write('set size 1.4,0.7\n')
  gnuOut.write('set output "%s_%s.tc.ps"\n'%(LName,nn))
  gnuOut.write('set encoding iso_8859_1\n')
  gnuOut.write('set xlabel "time (sec)"\n')
  gnuOut.write('set ylabel "% of total concentration"\n')
  gnuOut.write('set pointsize 2\n')
  #Cosmetics
  gnuOut.write('set style line 80 lt rgb "#808080"\n')
  gnuOut.write('set style line 81 lt 0\n')
  gnuOut.write('set style line 81 lt rgb "#808080"\n')
  gnuOut.write('set grid back linestyle 81\n')
  gnuOut.write('set border 3 back linestyle 80\n')
  gnuOut.write('set xtics nomirror\n')
  gnuOut.write('set ytics nomirror\n')
  gnuOut.write('set key outside right\n')
  #fOut = folded plot, uOut = unfolded plot, iOut = intermediate plot
  try:
    fOut = open("%s_%s.ftc.plot"%(LName,nn),'w+')
  except IOError:
    gnuOut.close()
    inFile.close()
    return [1,"Couldn't open file %s_%s.ftc.plot"%(LName,nn)]
  try:
    uOut = open("%s_%s.utc.plot"%(LName,nn),'w+')
  except IOError:
    gnuOut.close()
    inFile.close()
    fOut.close()
    return [1,"Couldn't open file %s_%s.utc.plot"%(LName,nn)]
  try:
    iOut = open("%s_%s.itc.plot"%(LName,nn),'w+')
  except IOError:
    gnuOut.close()
    inFile.close()
    fOut.close()
    uOut.close()
    return [1,"Couldn't open file %s_%s.itc.plot"%(LName,nn)]
  # Reads in data from TIMECOURSE lines
  for line in inFile:
    line = line.split()
    if len(line)!=0:
      if line[0]=='TIMECOURSE':
        fOut.write("%s %s\n"%(line[1],line[2]))
        uOut.write("%s %s\n"%(line[1],line[3]))
        iOut.write("%s %s\n"%(line[1],line[4]))
  fOut.close()
  uOut.close()
  iOut.close()
  inFile.close()
  #These next three lines tell gnuplot to plot the three curves together, each in a different color (red, blue, purple)
  #Note that it outputs as one line in gnuOut
  gnuOut.write('p "%s_%s.ftc.plot" w l lt rgb "red" lw 4 title "folded", '%(LName,nn))
  gnuOut.write('"%s_%s.utc.plot" w l lt rgb "blue" lw 4 title "unfolded", '%(LName,nn))
  gnuOut.write('"%s_%s.itc.plot" w l lt rgb "purple" lw 4 title "intermediate"\n'%(LName,nn))
  gnuOut.close()
  status,output = commands.getstatusoutput('%s < %s_%s.tc.gnu'%(gnuplot,LName,nn))
  return [status,output]

#from geofold this function takes the arguments LName, nn
#reading LName_nn.dag.nrg into LName_nn.nrg.gnu and LName_nn.nrg.plot
#then plotting as LName_nn.nrg.ps
def writeEnergyProfile(LName, nn):
  print("writeEnergyProfile")
  #list of colors to use
  colors = ['black','red','orange','yellow','green','blue','violet','cyan','magenta','pink','gold']
  #gnuplot environmental variables
  os.environ['GNUPLOT_PS_DIR'] = '/bach1/usr/local/share/gnuplot/4.2/PostScript'
  os.environ['GNUHELP'] = '/bach1/usr/local/share/gnuplot/4.2/gnuplot.gih'
  #gnuplot program itself
  gnuplot = '/bach1/usr/local/bin/gnuplot'
  #open LName_nn.dag.nrg
  file = "%s_%s.dag.nrg"%(LName,nn)
  try:
    inFile = open(file,'r')
  except IOError:
    return [1,"Couldn't open file %s_%s.dag.nrg"%(LName,nn)]
  #open LName_nn.nrg.gnu
  try:
    gnuOut = open("%s_%s.nrg.gnu"%(LName,nn),'w+')
  except IOError:
    inFile.close()
    return [1,"Couldn't open file %s_%s.nrg.gnu"%(LName,nn)]
  #open LName_nn.nrg.plot
  try:
    plotOut = open("%s_%s.nrg.plot"%(LName,nn),'w+')
  except IOError:
    inFile.close()
    gnuOut.close()
    return [1,"Couldn't open file %s_%s.nrg.plot"%(LName,nn)]
  #initial gnuplot settings for plot
  gnuOut.write('set terminal postscript enhanced portrait\n')
  gnuOut.write('set size 1.4,0.7\n')
  gnuOut.write('set output "%s_%s.nrg.ps"\n'%(LName,nn))
  gnuOut.write('set encoding iso_8859_1\n')
  #{/Symbol \253} = <----> {/Symbol \264} = multiplication symbol
  gnuOut.write('set xlabel "unfolded {/Symbol \253} folded\\nBuried surface area ({/Symbol \264}1000{\305}^{2})" font "TimesBold,18"\n')
  gnuOut.write('set ylabel "energy (kJ/mol)" font "TimesBold,18"\n')
  gnuOut.write('set pointsize 2\n')
  gnuOut.write('set nokey\n')
  #Cosmetics
  gnuOut.write('set style line 80 lt rgb "#808080"\n')
  gnuOut.write('set style line 81 lt 0\n')
  gnuOut.write('set style line 81 lt rgb "#808080"\n')
  gnuOut.write('set grid back linestyle 81\n')
  gnuOut.write('set border 3 back linestyle 80\n')
  gnuOut.write('set xtics nomirror\n')
  gnuOut.write('set ytics nomirror\n')


  #search LName_nn.dag.nrg for ISTATE lines
  #For each line found write out the 3rd and 4th field to plotOut
  inFile.seek(0,0)
  for line in inFile:
    line = line.split()
    if line[0]=="ISTATE":
      plotOut.write("%s %s\n"%(line[2],line[3]))
  plotOut.close()
  gnuOut.write('NRG = "%s_%s.nrg.plot"\n'%(LName,nn))
  #set up the range of the graph
  x = 999999.
  y = -999999.
  try:
    plotIn = open("%s_%s.nrg.plot"%(LName,nn),'r')
  except IOError:
    inFile.close()
    gnuOut.close()
    return [1,"Couldn't open file %s_%s.nrg.plot"%(LName,nn)]
  for line in plotIn:
    line = line.split()
    if float(line[1]) < x:
      x = float(line[1])
    if float(line[1]) > y:
      y = float(line[1])
  rng = y-x
  plotIn.close()
  ## This part labels the graphs with the nodes and cut-types involved at each point.
  ##However, they make the graph appear confusing as they have no context; thus, I have left it out.
  """
  inFile.seek(0,0)
  for line in inFile:
    line = line.split()
    tic = 0.05*rng
    if line[0]=='ISTATE':
      gnuOut.write('set label "%s" at %s,%s center\n' %(line[4],line[2],float(line[3])-tic))
  inFile.seek(0,0)
  for line in inFile:
    line = line.split()
    tic = .1*rng
    if line[0]=='ISTATE':
      gnuOut.write('set label "%s" at %s,%s center\n'%(line[5],line[2],float(line[3])-tic))
  inFile.seek(0,0)
  for line in inFile:
    line = line.split()
    tic = 0.05*rng
    if line[0]=='TSTATE':
      gnuOut.write('set label "%s" at %s,%s center\n'%(line[5],line[2],float(line[3])-tic))"""
      
  #kk and count are used should the number of lines to plot exceed the number of colors listed
  #This will allow colors to be repeated using a different point marker.  Note that these are kept
  #consistent for when they are superimposed in energyProfileAll
  kk = nn
  count = 0
  while nn > 11:
    count += 1
    kk = nn - 11
  gnuOut.write('p NRG w linespoints lw 4 lt rgb "%s" pt %s\n' %(colors[kk-1],count))
  gnuOut.close()
  inFile.close()
  status,output=commands.getstatusoutput('%s < %s_%s.nrg.gnu' %(gnuplot,LName,nn))
  return [status,output]

#Like writeEnergyProfile, but it superimposes the profile for all omega values onto one graph
def energyProfileAll(LName,omegaRange):
  print("energyProfileAll")
 #list of colors to use
  colors = ['black','red','orange','yellow','green','blue','violet','cyan','magenta','pink','gold']
  #gnuplot environmental variables
  os.environ['GNUPLOT_PS_DIR'] = '/bach1/usr/local/share/gnuplot/4.2/PostScript'
  os.environ['GNUHELP'] = '/bach1/usr/local/share/gnuplot/4.2/gnuplot.gih'
  #gnuplot program itself
  gnuplot = '/bach1/usr/local/bin/gnuplot'
 #from geofold this program takes the arguments LName, omegaRange
 
  try:
    gnuOut = open("%s_all.nrg.gnu"%(LName),'w+')
  except IOError:
    return [1,"Couldn't open file %s_all.nrg.gnu"%(LName)]
 #initial gnuplot settings for plot
  gnuOut.write('set terminal postscript enhanced portrait\n')
  gnuOut.write('set size 1.4,0.7\n')
  gnuOut.write('set output "%s_all.nrg.ps"\n'%(LName))
  gnuOut.write('set encoding iso_8859_1\n')
  #{/Symbol \253} = <----> {/Symbol \264} = multiplication symbol
  gnuOut.write('set xlabel "unfolded {/Symbol \253} folded\\nBuried surface area ({/Symbol \264}1000{\305}^{2})" font "TimesBold,18"\n')
  gnuOut.write('set ylabel "energy (kJ/mol)" font "TimesBold,18"\n')
  gnuOut.write('set pointsize 2\n')
  gnuOut.write('set key outside right\n')
  #Cosmetics
  gnuOut.write('set style line 80 lt rgb "#808080"\n')
  gnuOut.write('set style line 81 lt 0\n')
  gnuOut.write('set style line 81 lt rgb "#808080"\n')
  gnuOut.write('set grid back linestyle 81\n')
  gnuOut.write('set border 3 back linestyle 80\n')
  gnuOut.write('set xtics nomirror\n')
  gnuOut.write('set ytics nomirror\n')
  nn = 0
  count = 0
  gnuOut.write('p ')
  for value in omegaRange:
    nn+=1
    kk = nn
    while nn > 11:
      count += 1
      kk = nn-11
      #{/Symbol \167} = lowercase omega
    gnuOut.write('"%s_%s.nrg.plot" w linespoints lw 4 lt rgb "%s" pt %s title "{/Symbol \167} = %s"'%(LName,nn,colors[kk-1],count,value))
    if nn != len(omegaRange):
      gnuOut.write(', ')
  gnuOut.close()
  status,output = commands.getstatusoutput('%s < %s_all.nrg.gnu'%(gnuplot,LName))
  return [status,output]

#The version of dot on bach2 has a bug in which circles generated in an imagemap
#are created with a comically large radius.  This function fixes the imagemap so it can be used.

def fixMap(dagMap):
  print("fixMap")
  try:
    tmpMap = open("%s.tmp"%(dagMap),'w+') #creates a tmp file to write the new map to
  except IOError:
    return [1,"Could not open file %s.tmp"%(tmpMap)]
  try:
    read = open(dagMap,'r') #opens the old map to be fixed
  except IOError:
    tmpMap.close()
    return [1,"Couldn't open file %s"%(dagMap)]
  line = read.readline()  #reads a line from dagMap
  while line!='':       #while not end of file
    newline=line
    if len(line.split("circle"))!=1:  #if the line contains code for circle,
      tmp = line.split('coords="')
      newline = tmp[0]+'coords="'
      coords = tmp[1][:-3]
      commaCoords = coords.split(',')
      radius = int(commaCoords[2].strip('"'))-int(commaCoords[0])  #subtract from the value of the 3rd coordinate (radius) the value of the 1st
      newline+='%s,%s,%s"/>\n'%(commaCoords[0],commaCoords[1],radius)
    tmpMap.write(newline)
    line = read.readline()
  tmpMap.close()
  read.close()
  status,output = commands.getstatusoutput('mv %s.tmp %s'%(dagMap,dagMap))  #replace the old map with the new one
  return [status,output]
      
    
#runs a command and exits the program if an error is found
def getError(command):
  status,output = commands.getstatusoutput(command)
  if "error" in output.lower() or status != 0:  
    paramFile.close()
    permWrite.close()         
    tmpWrite.close()
    sys.exit("Error in %s\n%s: %s"%(command,status,output))
  return status,output
  
#function used to copy htmlTmp to htmlOut so client can see progress of geofold  
def makeCopy(inFile,outFile): 
  try:
    writeOut = open(outFile,'w+')
  except IOError:
    return [1,'Could not open file %s'%(out)]
  try:
    readIn = open(inFile,'r')
  except IOError:
    writeOut.close()
    return [1,'Could not open file %s'%(tmp)]
  for line in readIn:
    writeOut.write(line)
  writeOut.close()
  readIn.close()
  return [0,'']
  

#Takes the imagemap generated by dot and fixed by fixMap and creates the final DAG html file
def makeMap(htmlDir,LName):
  mapFile = "%s/%s.dag.map"%(htmlDir,LName) #client-side imagemap created by dot
  dagFile = "%s.dag"%(LName)  #dag generated by geofold
  try:
    mapIn = open(mapFile,'r')
  except IOError:
    return [1, "Couldn't open file %s"%(mapFile)]
  try:
    mapOut = open("%s/%s.html"%(htmlDir,dagFile),'w+')
  except IOError:
    mapIn.close()
    return [1,"Couldn't open file %s/%s.html"%(htmlDir,dagFile)]
  #replace the first line of the file
  mapOut.write('<html><body><img src="%s.png" border=0 usemap="#dagmap">\n'%(dagFile))
  mapOut.write('<map name="dagmap">\n')
  for line in mapIn:
    if line.rstrip() != '<map id="FILENAME" name="FILENAME">':
      mapOut.write(line)
  mapOut.write('</body></html>')
  mapOut.close()
  mapIn.close()
  return [0,'']

#find parameters in the parameters file
def findParam (paramFile, target): 
  paramFile.seek(0,0) #Go back to the beginning of the file
  if target == "ORANGE":  #Special case for ORANGE
    for line in paramFile:
      if target in line:
        s = line.split(' ')
        s.pop(0)
        for i in range(0,len(s)):
          s[i]=s[i].strip(' ,\n\r') #get rid of non-numerical characters that may be present
          if s[i]=='':  #remove empty components
            s.pop(i)  
        return [0,s]
    return findParam(paramFile,'OMEGA')[1] #if ORANGE not in parameters, set it to OMEGA
  else:
    for line in paramFile:
      if target in line:
        s= line.split()
        if len(s) < 1:
          return [1,'']
        else:
          return [0,s[1]]
   
  return [1, '']


  
if len(sys.argv) < 2:
	#### JOB level variable from parameter file ####
	# pdbCode is the basename of a PDB file to be found in TMPDIR
	# chain is a set of chain IDs within the PDB file, or _ for space.
	# LName is a unique name for this job or the process ID
	# OName is a unique name for a previous job, to be used to skip GEOFOLD.
	# UName is a unique name for the current job (or username?)
  print("USAGE: rungeofold.py parametersFile")
  sys.exit()
else:
  #Read parameters from the parameters file
  paramFilename = sys.argv[1]
  try:
    paramFile= open (paramFilename, 'r')
  except IOError:
    sys.exit(paramFilename+" could not be opened.")
  ##with paramFile:
  status,pdbCode= findParam(paramFile, "PDBCODE")
  if status != 0:     
    paramFile.close()
    sys.exit("PDBCODE line not found.") 
  print("PDBCODE %s" %(pdbCode))
  status,chain=  findParam(paramFile, "CHAIN")
  if status!=0:
    paramFile.close()
    sys.exit(paramFilename+" chainid not found.")
  print("Chain "+chain)
  status,LName=  findParam(paramFile, "LNAME")
  if status != 0:
    print(paramFilename+" LNAME value not found.")
    LName= str(os.getpid())
  print("LName " + LName)
  status,OName=  findParam(paramFile, "ONAME")
  if status != 0:
    OName=LName
  UName = pdbCode + chain + LName
  print("ONAME "+OName)
  try:
    keyword = findParam(paramFile, "KEYWORD")[1]
  except LookupError:
    keyword = ""

	########################## DIRECTORIES #############################
	### SET THESE DIRECTORIES AS FOLLOWS:
	# gDir is the geofold directory created by tar -zxvf geofold.tgz
	# tmpDir is a temporary file directory. Everything in that
	# directory can be deleted later. The PDB file should be copied
	# to tmpDir to start.
	# logDir is a place to hold the log file.
	# htmlDir is a public_html directory where HTML
	# file may be viewed.
	# jobDir holds job files that are read by geod.csh
	# (not used in this script except to clean up)
	# thisDir is the directory where you are running this script.
	
	
	#Directory settings for server
  thisDir = os.getcwd()
  baseDir = "/bach1/home/bystrc/server/geofold"
  gDir      = baseDir+"/src/geofold"
  bDir      = baseDir+"/bin"
  maskerDir = baseDir+"/src/geofold/masker"
  tmpDir    = baseDir+"/tmp"
  pdbDir    = tmpDir
  logDir    = baseDir+"/log"
  htmlDir   = baseDir+"/output"
  jobDir    = baseDir+"/job"
  paramTemplate= gDir+"/bin/parameters"
  
	
  baseURL = "http://www.bioinfo.rpi.edu/bystrc/geofold"
  outputURL= "output"
  
  #Directory settings for B. Walcott
  #thisDir   = os.getcwd()
  #baseDir   = thisDir
  #gDir      = baseDir
  #bDir      = baseDir
  #maskerDir = gDir+'/masker'
  #pdbDir    = gDir+'/pdbs'
  #tmpDir    = gDir+'/tmp'
  #tmpDir    = baseDir+"/tmp"
  #logDir    = baseDir+"/log"
  #htmlDir   = baseDir+"/html"
  #jobDir    = baseDir+"/job"
  #paramTemplate=gDir+'/parameters'
  #baseURL='http://bach1.bio.rpi.edu/walcob/geofold'
  #outputURL='html'

	#### FILES ####
  htmlRefresh= "%s/header_refresh.html" %(bDir)
  htmlHead= "%s/header.html" %(bDir)
  htmlTmp= "%s/%s.html" %(tmpDir,LName)
  htmlLog= "%s/%s.log" %(logDir,LName)
  htmlOut= "%s/%s.html" %(htmlDir,LName)
  htmlPerm = "%s/%s.perm" %(tmpDir,LName)

  ###PROGRAMS####
  maxTraffic= gDir+"/maxTraffic"
  mtCut= 0.1
  convert = "/bach1/usr/bin/convert"
  dot = "/usr/bin/dot"
  
  try:
    tmpWrite = open(htmlTmp, 'w+')
  except IOError:
    paramFile.close()
    sys.exit("Couldn't open file %s"%(htmlTmp))
  try:
    permWrite = open(htmlPerm,'w+')
  except IOError:
    paramFile.close()
    sys.exit("Couldn't Open file %s"%(htmlPerm))


  #### VARIABLES ####
  # omega is the desolvation free energy
  # maxSplit is the maximum number of splits for each intermediate
  #   of unfolding.
  # folding (folding) = 1 is folding, 0 is unfolding
  # halflife = 1 for stopping at the half-life, 0 to go to
  #equilibrium in Unfoldsim

  #variable parameters
  status,folding= findParam (paramFile, "FING")
  if status != 0:
    folding = 0
  status, halflife= findParam (paramFile, "HLFE")
  if status !=0:
    halflife = 0
  status,bCut= findParam (paramFile, "BREAKCUT")
  if status != 0:
    paramFile.close()
    sys.exit("BCUT not found")
  status, pCut= findParam (paramFile, "PIVOTCUT")
  if status != 0:
    paramFile.close()
    sys.exit("PCUT not found")
  status,hCut= findParam (paramFile, "HINGECUT")
  if status != 0:
    paramFile.close()
    sys.exit("HCUT not found")
  status,wat= findParam (paramFile, "WAT")
  if status != 0:
    paramFile.close()
    sys.exit("WAT not found")
  status,voids=findParam (paramFile, "VOIDENTROPY")
  if status != 0:
    paramFile.close()
    sys.exit("VOIDENTROPY not found")
  voids = float(voids)
  status,omegaRange= findParam (paramFile, "ORANGE")
  print("ORANGE ",omegaRange)
  status,maxSplit = findParam (paramFile, "MAXSPLIT")
  if status != 0:
    maxSplit = 4
  status, doIt = findParam (paramFile, "RUNGEOFOLD")
  if status != 0:
    doIt = True
  doIt = bool(int(doIt))
  print("doIt: %s"%(doIt))
  if doIt :
    print "Running  GEOFOLD"
  else:
    print "Skipping GEOFOLD"
    refresh = "cat %s > %s" %(htmlRefresh,htmlTmp)
    commands.getstatusoutput(refresh)
    tmpWrite.write("<h3>Skipping GeoFOLD. UnfoldSim results for " + UName + "</h3><br>")		
    tmpWrite.write("<h4>Using previously calculated DAG file " + OName + " </h4><br>")
    tmpWrite.write("<pre><br>")
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
    tmpWrite.write("</body></html>")
    if OName == UName:
      print("ERROR Need old job name as arg 4 to skip geofold.")     
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    cp = "cp %s/%s.dag %s/%s.dag" %(tmpDir,OName,tmpDir,LName)
    commands.getstatusoutput(cp)
  if doIt :
    print("============= PARAMETERS =============")
    tmpWrite.write("============= PARAMETERS =============<br>")  
    if os.path.getsize(paramFilename)==0:
      tmpWrite.write("Parameters file is empty!!\n")
      sys.exit("Parameters file is empty!!!")
    tmpWrite.write("Using these parameters<br>")
    for line in paramFile:
      tmpWrite.write(line+'<br>')
    paramFile.close()
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
    print("============= GETCHAIN =============")
    tmpWrite.write("============= GETCHAIN =============<br>")
    pdbFile = "%s/%s.pdb" %(pdbDir,pdbCode)
    if not os.path.isfile(pdbFile):
      sys.exit("File not found: %s\n" %(pdbFile))
    tmpWrite.write("Extracting protein atoms from %s<br>" %(pdbCode))
    getProtein = "%s/xgetchain + < %s/%s.pdb > %s/%s.tmp" %(gDir,pdbDir,pdbCode,tmpDir,LName)
    getError(getProtein)
    tmpWrite.write("Extracting chains %s<br>" %(chain))
    getChains = "%s/xgetchain %s < %s/%s.tmp > %s/%s.pdb" %(gDir,chain,tmpDir,LName,tmpDir,LName)
    print(getChains)
    status, output = commands.getstatusoutput(getChains)
    if status != 0 or getError(output):
      tmpWrite.write("Error in GETCHAIN<br>")
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit("Error in GETCHAIN\n"+output)
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
    print("============= RENUMBER =============" )
    tmpWrite.write("============= RENUMBER =============<br>" )
    LNamePDB = "%s/%s.pdb" %(tmpDir,LName)
    if not os.path.isfile(LNamePDB):
      sys.exit("File not found: %s\n" %(LNamePDB))
    renumberOne = "%s/xrenumber_one %s %s/%s.tmp" %(gDir,LNamePDB,tmpDir,LName)
    print(renumberOne)
    status, output = commands.getstatusoutput(renumberOne)
    if status != 0 or getError(output):
      tmpWrite.write("Error in renumber_one<br>")
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit("Error in renumber_one\n"+output)
    mv = "mv %s/%s.tmp %s" %(tmpDir,LName,LNamePDB)
    print(mv)
    commands.getstatusoutput(mv)
    cp = "cp %s %s/%s.pdb" %(LNamePDB,htmlDir,LName)
    print(cp)
    commands.getstatusoutput(cp)
    if os.path.getsize(LNamePDB)==0:
      tmpWrite.write("Error. empty file.\n")
      tmpWrite.close()
      makeCopy(htmlTmp,htmlOut)
      tmpWrite = open(htmlTmp,'a')
      outWrite = open(htmlOut,'a')
      outWrite.write('</pre></body></html>\n')
      outWrite.close()
    print("#============= 3to1 (extract sequence) =============")
    tmpWrite.write("============= 3to1 (extract sequence) =============<br>")
    x3to1 = "%s/x3to1 + < %s > %s/%s.seq" %(gDir,LNamePDB,tmpDir,LName)
    getError(x3to1)
    tmpWrite.write("Complete sequence (all chains ) is<br>")
    seqFile = open("%s/%s.seq"%(tmpDir,LName))
    for line in seqFile:
      tmpWrite.write(line+'<br>')
    seqFile.close()
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
    print("============= PDB2CIJ (extract contacts) =============\n")
    tmpWrite.write("============= PDB2CIJ (extract contacts) =============<br>\n")
    pdb2cij = "%s/xpdb2cij %s 8. > %s/%s.cij" %(gDir,LNamePDB,tmpDir,LName)
    status, output = commands.getstatusoutput(pdb2cij)
    if status != 0 or getError(output):
      tmpWrite.write("Error in PDB2CIJ<br>\n") 
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit("Error in PDB2CIJ\n"+output)
    tmpWrite.write("Number of contacts found: <br>")
    writeNumContacts = "wc -l %s/%s.cij | awk '{print $1}'>> %s" %(tmpDir,LName,htmlTmp)
    status,output = commands.getstatusoutput(writeNumContacts)
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
    print("============= PDB2HB (extract H-bonds SS-bonds) =============\n")
    tmpWrite.write("============= PDB2HB (extract H-bonds SS-bonds) =============<br>\n")
    pdb2hb = "%s/xpdb2hb %s %s > %s/%s.hb" %(gDir,paramFilename,LNamePDB,tmpDir,LName)
    status, output = commands.getstatusoutput(pdb2hb)
    if status != 0 or getError(output):
      tmpWrite.write("Error in PDB2HB<br>\n")
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit("Error in PDB2HB\n"+output)
    writeParam = "echo '\nHBONDS %s/%s.hb' >> %s" %(tmpDir,LName,paramFilename)
    status,output = commands.getstatusoutput(writeParam)
    print("============= CONTACTMASK =============\n")
    tmpWrite.write("============= CONTACTMASK =============<br>\n")
    writeTime = "Time before running CONTACTMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    
    ##masker setup
    os.environ['MASKERDIR']=maskerDir
    os.environ['DESIGN_HOME']=os.environ['MASKERDIR']
    os.environ['MSIZE']="512"
    os.environ['DTHETA']="9.0"
    os.environ['MASKLIB']="%s/%s.mask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VMASK']="%s/%s.vmask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VTRIANGLE']="%s/%s.tri" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKTEMPLATE']="%s/%s.sort" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKDAT']="%s/%s.dat" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['ATOMLIB']="%s/atoms.lib" %(os.environ['MASKERDIR'])
    os.environ['COUNTBITS']="%s/cbits.bin" %(os.environ['MASKERDIR'])
    os.environ['COLLARS']="%s/collars%s.bin" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['SLOPES']="%s/slopes%s.dat" %(os.environ['MASKERDIR'],os.environ['DTHETA'])
    os.environ['FORCEFIELD']="%s/gromacs_ff.prm" %(os.environ['MASKERDIR'])
    
    contactmask = "%s/xcontactmask %s %s/%s.sas 1.4" %(maskerDir,LNamePDB,tmpDir,LName)
    getError(contactmask)
    writeTime = "Time after running CONTACTMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    cp = "cp %s/%s.sas %s/%s.sas" %(tmpDir,LName,htmlDir,LName)
    commands.getstatusoutput(cp)
    line = 'Pairwise contact surfaces <a href = "\'%s.sas\'">file.</a><br>' %(LName)
    tmpWrite.write(line)
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
    writeParam = "echo CONTACTS %s/%s.sas >> %s" %(tmpDir,LName,paramFilename)
    commands.getstatusoutput(writeParam)
    print("============= PDB2SEAMS (extract seams) =============\n")
    tmpWrite.write("============= PDB2SEAMS (extract seams) =============<br>\n")
    pdb2seams = "%s/seams/xpdb2seams %s %s/%s.sas > %s/%s.seams" %(gDir,LNamePDB,tmpDir,LName,tmpDir,LName)
    os.environ['GDIR']=gDir
    getError(pdb2seams)
    writeParam = "echo SEAMS %s/%s.seams >> %s" %(tmpDir,LName,paramFilename)
    commands.getstatusoutput(writeParam)
    print("============= SPLITSEAMS =============\n")
    tmpWrite.write("============= SPLITSEAMS =============<br>\n")
    splitseams = "%s/xsplitseams %s/%s.pdb %s/%s.seams %s/%s.sas %s/%s.hb %s/%s.par %s/%s.split > %s/%s.splitlog" %(gDir,tmpDir,LName,tmpDir,LName,tmpDir,LName,tmpDir,LName,tmpDir,LName,tmpDir,LName,tmpDir,LName)
    print(splitseams)
    status, output = commands.getstatusoutput(splitseams)
    if status != 0 or getError(output):
      tmpWrite.write("Error in SPLITSEAMS<br>")
      print("Error in SPLITSEAMS")  
      print(output)   
      paramFile.close()
      permWrite.close()         
      tmpWrite.close()
      sys.exit()
    writeParam = "echo SEAMS %s/%s.seams >> %s" %(tmpDir,LName,paramFilename)
    print("============= VOIDMASK =============\n")
    tmpWrite.write("============= VOIDMASK =============<br>\n")
    
    
    writeTime = "Time before running VOIDMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    
    ## This should be read from a file......
    ##masker setup
    os.environ['MASKERDIR']=maskerDir
    os.environ['DESIGN_HOME']=os.environ['MASKERDIR']
    os.environ['MSIZE']="512"
    os.environ['DTHETA']="9.0"
    os.environ['MASKLIB']="%s/%s.mask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VMASK']="%s/%s.vmask" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['VTRIANGLE']="%s/%s.tri" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKTEMPLATE']="%s/%s.sort" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['MASKDAT']="%s/%s.dat" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['ATOMLIB']="%s/atoms.lib" %(os.environ['MASKERDIR'])
    os.environ['COUNTBITS']="%s/cbits.bin" %(os.environ['MASKERDIR'])
    os.environ['COLLARS']="%s/collars%s.bin" %(os.environ['MASKERDIR'],os.environ['MSIZE'])
    os.environ['SLOPES']="%s/slopes%s.dat" %(os.environ['MASKERDIR'],os.environ['DTHETA'])
    os.environ['FORCEFIELD']="%s/gromacs_ff.prm" %(os.environ['MASKERDIR'])
    
    if voids != 0  :
      voidmask = "%s/xvoidmask %s %s/%s.void.pdb 1.4 1.2 1.4" %(maskerDir,LNamePDB,tmpDir,LName)
      print(voidmask)
      status,output = commands.getstatusoutput(voidmask)
      if status != 0 or getError(output):
        tmpWrite.write("Error in VOIDMASK<br>")
        print("Error in VOIDMASK")  
        print(output)   
        paramFile.close()
        permWrite.close()         
        tmpWrite.close()
        sys.exit()
      cp = "cp %s/%s.void.pdb %s/%s.void.pdb" %(tmpDir,LName,htmlDir,LName)
      commands.getstatusoutput(cp)
    else:
      cp = "cp %s/%s.pdb %s/%s.void.pdb" %(tmpDir,LName,tmpDir,LName)
      commands.getstatusoutput(cp)
      cp = "cp %s/%s.pdb %s/%s.void.pdb" %(tmpDir,LName,htmlDir,LName)
      commands.getstatusoutput(cp)
    writeTime = "Time after running VOIDMASK "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    if os.path.getsize("%s/%s.void.pdb"%(tmpDir,LName))==0:
      tmpWrite.write("ERROR in VOIDMASK. Empty file.")
      tmpWrite.close()
      makeCopy(htmlTmp,htmlOut)
      tmpWrite = open(htmlTmp,'a')
      outWrite = open(htmlOut,'a')
      outWrite.write('</pre></body></html>\n')
      outWrite.close()
      sys.exit("ERROR in VOIDMASK. Empty file.")
    line = 'Coordinates with void positions: <a href="\'%s.void.pdb\'"> %s.void.pdb </a><br>' %(LName,LName)
    tmpWrite.write(line)
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
    print("============= GEOFOLD =============")
    tmpWrite.write("============= GEOFOLD =============<br>")
    writeTime = "Time before running GEOFOLD "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    geofold = "%s/xgeofold %s/%s.void.pdb %s/%s.dag %s" %(gDir,tmpDir,LName,tmpDir,LName,paramFilename)
    print(geofold)
    getError(geofold)
    writeTime = "Time after running GEOFOLD "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    dagFile = "%s/%s.dag" %(tmpDir,LName)
    if os.path.getsize(dagFile)==0:
      tmpWrite.write("ERROR in GEOFOLD. Empty file.\n")
      tmpWrite.close()
      makeCopy(htmlTmp,htmlOut)
      tmpWrite = open(htmlTmp,'a')
      outWrite = open(htmlOut,'a')
      outWrite.write('</pre></body></html>\n')
      outWrite.close()
      sys.exit("ERROR in GEOFOLD. Empty file.")
    cp = "cp %s/%s.dag %s/%s.dag" %(tmpDir,LName,htmlDir,LName)
    commands.getstatusoutput(cp)
    line = 'Directed acyclic graph (DAG) <a href="\'%s.dag\'">file.</a><br>' %(LName)
    tmpWrite.write(line)
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
  outWrite.close()
  ##SKIPGEOFOLD
  LNamePDB = "%s/%s.pdb" %(tmpDir,LName)
  print("============= UNFOLDSIM =============")
  tmpWrite.write("Unfolding %s%s<br>" %(pdbCode,chain))
  tmpWrite.write("============= UNFOLDSIM =============<br>")
  nn = 0
  for value in omegaRange:
    nn += 1
    cp = "cp %s/%s.dag %s/%s_%s.dag" %(tmpDir,LName,tmpDir,LName,nn)
    commands.getstatusoutput(cp)
    sed = "sed -e \"s/^OMEGA .*/OMEGA %s/\" %s > %s.1" %(value,paramFilename,paramFilename)
    status,output=commands.getstatusoutput(sed)
    logFile = "%s/%s_%s.log" %(tmpDir,LName,nn)
    print("============= run %s omega = %s =============" %(nn,value))
    tmpWrite.write("============= run %s omega = %s =============<br>" %(nn,value))
    writeTime = "Time before running UNFOLDSIM "+time.strftime("%c") +'<br>'
    tmpWrite.write(writeTime)
    unfoldsim = "%s/xunfoldsim %s/%s_%s.dag %s.1 > %s" %(gDir,tmpDir,LName,nn,paramFilename,logFile)
    print(unfoldsim)
    tmpWrite.write(unfoldsim+'<br>')
    getError(unfoldsim)
    writeTime = "Time after running UNFOLDSIM "+time.strftime("%c")+'<br>'
    tmpWrite.write(writeTime)
    tmpWrite.write("<p><pre><br>")
    # grep = "grep ^\"TIMECOURSE\" %s | tail -1 >> %s" %(logFile,htmlTmp)
    log = open(logFile,'r')
    lines = []
    for line in log:
      linesplit = line.split()
      if len(linesplit) != 0 and linesplit[0]=='TIMECOURSE':
        lines.append(line)
    tmpWrite.write(lines[len(lines)-1])
    log.close()
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
  print("============= PATHWAY2PS =============")
  tmpWrite.write("============= PATHWAY2PS =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    pathway2ps = "%s/xpathway2ps %s/%s.seq %s/%s_%s.dag.path %s/%s.cij %s/%s_%s.ps 4" %(gDir,tmpDir,LName,tmpDir,LName,nn,tmpDir,LName,tmpDir,LName,nn)
    tmpWrite.write(pathway2ps+'<br>')
    status,output = commands.getstatusoutput(pathway2ps)
    tmpWrite.write(output+'<br>')
    tmpWrite.close()
    makeCopy(htmlTmp,htmlOut)
    tmpWrite = open(htmlTmp,'a')
    outWrite = open(htmlOut,'a')
    outWrite.write('</pre></body></html>\n')
    outWrite.close()
  print("============= CONVERT =============")
  tmpWrite.write("============= CONVERT =============<br>")
  nn=0
  for value in omegaRange:
    nn+=1
    runConvert = "%s -trim -geometry 100 %s/%s_%s.ps %s/%s_%s_thumb.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    commands.getstatusoutput(runConvert)
    runConvert = "%s %s/%s_%s_thumb.gif %s/%s_%s_thumb.jpg" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    commands.getstatusoutput(runConvert)
    runConvert = "%s -trim %s/%s_%s.ps %s/%s_%s.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    commands.getstatusoutput(runConvert)
    runConvert = "%s %s/%s_%s.gif %s/%s_%s.jpg" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    commands.getstatusoutput(runConvert)

  print("============= MAXTRAFFIC =============")
  tmpWrite.write("============= MAXTRAFFIC =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    runMaxTraffic = "%s %s/%s_%s.dag.out %s > %s/%s_%s.dot" %(maxTraffic,tmpDir,LName,nn,mtCut,tmpDir,LName,nn)
    tmpWrite.write(runMaxTraffic+'<br>')
    getError(runMaxTraffic)
  print("============= DOT =============")
  tmpWrite.write("============= DOT =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    runDot = "%s -Gdpi=100 -Gsize=6,100 -Tcmapx  -o %s/%s_%s.dag.map %s/%s_%s.dot" %(dot,htmlDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runDot+'<br>')
    getError(runDot)
    fixMap('%s/%s_%s.dag.map'%(htmlDir,LName,nn))
    runDot = "%s -Tps -o %s/%s_%s.dot.ps %s/%s_%s.dot" %(dot,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runDot+'<br>')
    getError(runDot)
  print("============= CONVERT =============")
  tmpWrite.write("============= CONVERT =============<br>")
  nn = 0
  for value in omegaRange:
    nn+=1
    runConvert = "%s -trim -geometry 100 %s/%s_%s.dot.ps  %s/%s_%s.dag_thumb.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    getError(runConvert)
    runConvert = "%s %s/%s_%s.dag_thumb.gif %s/%s_%s.dag_thumb.jpg" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    getError(runConvert)
    runConvert = "%s -trim -geometry 600 %s/%s_%s.dot.ps %s/%s_%s.dag.gif" %(convert,tmpDir,LName,nn,tmpDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')    
    getError(runConvert)
    runConvert = "%s %s/%s_%s.dag.gif %s/%s_%s.dag.png" %(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    tmpWrite.write(runConvert+'<br>')
    getError(runConvert)
    
  #################### CREATE FINAL OUTPUT HTML FILE ##########################
  nn = 0
  for value in omegaRange:
    nn+=1
    LNameValue = "%s_%s"%(LName,nn)
    makeMap(htmlDir,LNameValue)
  #Get h/s-bond info
  h,s = getHS("%s/%s"%(tmpDir,LName))
  ## Main output page
  #header of document
  permWrite.write('<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">\n')
  permWrite.write('<html>\n<head><title>GeoFold Server</title>\n')
  permWrite.write('<link rev=made href="mailto:bystrc@rpi.edu">\n</head>\n')
  permWrite.write('<body>\n<img src="../banner.gif">\n')
  
  #table
  permWrite.write('<table width = "80%">\n<tr><td colspan="2">\n')
  #molscript gif
  permWrite.write('<img src="%s.gif" alt="image not found for %s.pdb. Try re-loading.">\n'%(LName,LName))
  permWrite.write('</td>\n')
  #basic information
  permWrite.write('<td colspan="4">\n<h1>Unfolding...</h1>\n')
  permWrite.write('<h4>%s</h4>\n'%(LName))
  permWrite.write('<h4><a href="%s.pdb">Coordinate file (%s)</a></h4>\n'%(LName,LName))
  permWrite.write('<h4><a href="./%s_1.dag.out">Unfolding graph for %s</a></h4>\n'%(LName,LName))
  #h/s-bond info
  permWrite.write('<h5>Number of H-bonds fond: %s</h5>\n'%(h))
  permWrite.write('<h5>Number of SS-bonds found: %s</h5>\n'%(s))
  #Sequence info  
  permWrite.write('<pre>\n')
  try:
    seqFile = open("%s/%s.seq"%(tmpDir,LName))
  except IOError:
    print("Couldn't get sequence information")
  with seqFile:
    for line in seqFile:
      permWrite.write(line)
    seqFile.close()
  permWrite.write('</pre>\n</td>\n</tr>\n<tr>\n')
  
  #Timecourse info
  nn = 0
  for value in omegaRange:
    nn+=1
    permWrite.write('<td><a href="%s_%s.log">timecourse</a> for &omega; = %s<br><a href="%s_%s.tc.png"><img src="%s_%s.tc_thumb.png" width=100 alt="timecourse data missing"></a></td>\n'%(LName,nn,value,LName,nn,LName,nn))
  permWrite.write('</tr>\n<tr>\n')
  
  #Ageplots
  nn = 0
  for value in omegaRange:
    nn+=1
    permWrite.write('<td>Age plot for %s<br><a href="%s_%s.jpg"><img src="%s_%s_thumb.jpg" width=100 alt="age plot data missing"></a>\n</td>\n'%(value,LName,nn,LName,nn))
  permWrite.write('</tr>\n<tr>\n')
  
  #DAGs
  nn = 0
  for value in omegaRange:
    nn+=1
    permWrite.write('<td>Pathways at %s<br><a href="%s_%s.dag.html"><img src="%s_%s.dag_thumb.jpg" width=100 alt="pathway data missing"></a></td>\n'%(value,LName,nn,LName,nn))
  permWrite.write('</tr>\n<tr>\n')  
  
  #Energy Profiles
  nn = 0
  for value in omegaRange:
    nn+=1
    permWrite.write('<td>Energy profile for %s<br><a href="%s_%s.nrg.png"><img src="%s_%s.nrg_thumb.png" width=100 alt="energy data missing"></a></td>\n'%(value,LName,nn,LName,nn))
  permWrite.write('</tr>\n</table>\n')
  
  permWrite.write('<h3><A HREF="http://www.bioinfo.rpi.edu/geofold/howtoreadit.htm">How to Read GeoFOLD Output</A></h3>\n')
  #Equilibrium info
  permWrite.write('<hr width="80%">\n')
  if halflife == 1:
    if folding == 1:
      permWrite.write("<h4>Times and concentrations at 1/2 folded")
    else:
      permWrite.write("<h4>Times and concentrations at 1/2 unfolded")
  else:
    if folding == 1:
      permWrite.write("<h4>Equilibrium concentrations and rates under folding conditions")
    else:
      permWrite.write("<h4>Equilibrium concentrations and rates under unfolding conditions")
  #output this info as a table
  permWrite.write('</h4>\n<table width = "80%">\n')
  permWrite.write('<tr><td>&Delta;G<sub>solvation</sub></td><td>time(sec)</td><td>final [F]</td><td>final [U]</td><td>final[I]</td><td>half-life (sec)</td></tr>\n')
  plotFile= open("%s/%s.plot"%(tmpDir,LName),'w+')
  nn = 0
  for value in omegaRange:
    nn+=1
    logFile = open("%s/%s_%s.log" %(tmpDir,LName,nn),'r')
    permWrite.write('<tr><td>%s kJ/mol/&Aring;<sup>2</sup></td>'%(value))
    #find the last TIMECOURSE line in logFile and writeout its contents
    timecourses = []
    for line in logFile:
      line = line.split()
      if len(line)!=0:
        if line[0]=='TIMECOURSE':
          timecourses.append(line)
    line = timecourses[len(timecourses)-1]
    logFile.close()
    # permWrite.write('<td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td>'%(line[1],line[2],line[3],line[4],line[5]))
    permWrite.write('<td>%s</td><td>%s</td><td>%s</td><td>%s</td>'%(line[1],line[2],line[3],line[4]))
    #calculate ln(ku) stuff for plot
    i = 0
    #find the last timecourse where the unfolded state is < 50 if unfolding, folded state if otherwise
    if folding != 1:
      while i<len(timecourses) and float(timecourses[i][3])<50:
        i+=1
    else:
      while i < len(timecourses) and float(timecourses[i][2])<50:
        i+=1
    i-=1
    # hl = math.log(math.log(2)/float(timecourses[i][1]))
    lnku = math.log(math.log(2)/float(timecourses[i][5]))
    permWrite.write('<td>%s</td>'%(timecourses[i][5]))
    plotFile.write("%s %s\n"%(value,lnku))
  plotFile.close()
  permWrite.write('</table>\n')
  
  print("============= FIT_POLY =============")
  tmpWrite.write('<pre>\n')
  fit_poly = "%s/xfit_poly %s/%s.plot 1 %s/%s.fit >> %s" %(gDir,tmpDir,LName,tmpDir,LName,htmlTmp)
  getError(fit_poly)
  #Predicting half-life in water (omega = 30.)
  fitFile = open("%s/%s.fit"%(tmpDir,LName),'r')
  line = fitFile.readline()
  lines = []
  lsq = False
  while not lsq:
    line = fitFile.readline()
    if "Least-squares" in line:
      lsq = True
      lines.append(fitFile.readline())
      lines.append(fitFile.readline())
      lines.append(fitFile.readline())
      ic = lines[1]
      sl = lines[2]
      ic = ic.split()
      sl = sl.split()
      ic = float(ic[1])
      sl = float(sl[1])
  lnku = (sl*float(wat))+ic
  hl = math.log(2)/math.exp(lnku)
  fitFile.close()
  permWrite.write('<h5>Projected half-life of unfolding in pure water (&Delta;G<sub>solvation</sub> = %s kJ/mol/&Aring;<sup>2</sup>): %s seconds</h5><br>'%(wat,hl))
  
  #final graph outputs
  permWrite.write('<table>\n<tr>\n<td>\n')
  permWrite.write('<h4>ln(k<sub>u</sub>) vs &omega; for %s </h4>'%(LName))
  permWrite.write('<a href="%s.gp.jpg"><img src="%s.gp_thumb.jpg" alt="data missing"></a><br>\n</td>\n'%(LName,LName))
  permWrite.write('<td>\n<h4>Superimposed energy profiles for %s </h4>'%(LName))
  permWrite.write('<a href="%s_all.nrg.png"><img src="%s_all.nrg_thumb.png" alt="data missing"></a><br>\n</td></tr></table>'%(LName,LName))
  #Completion time
  permWrite.write('<br>Completed %s<br>'%(time.strftime("%c")))
  permWrite.write('<p>Modify and do over:\n')
  
  #### Create gnuplot image
  print("============= GNUPLOT =============")
  nn = 0
  for value in omegaRange:
    nn+=1
    plotTimeCourse("%s/%s"%(tmpDir,LName),nn)
    runConvert = '%s -trim -geometry 100 %s/%s_%s.tc.ps %s/%s_%s.tc_thumb.png'%(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    getError(runConvert)
    runConvert = '%s -trim %s/%s_%s.tc.ps %s/%s_%s.tc.png'%(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    getError(runConvert)
    writeEnergyProfile("%s/%s"%(tmpDir,LName), nn)
    runConvert = '%s -trim -geometry 100 %s/%s_%s.nrg.ps %s/%s_%s.nrg_thumb.png'%(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    getError(runConvert)
    runConvert = '%s -trim %s/%s_%s.nrg.ps %s/%s_%s.nrg.png'%(convert,tmpDir,LName,nn,htmlDir,LName,nn)
    getError(runConvert)
  status,output = energyProfileAll("%s/%s"%(tmpDir,LName),omegaRange)
  if status != 0:
    print(status)
    print(output)
  else:
    runConvert = '%s -trim -geometry 200 %s/%s_all.nrg.ps %s/%s_all.nrg_thumb.png'%(convert,tmpDir,LName,htmlDir,LName)
    getError(runConvert)
    runConvert = '%s -trim %s/%s_all.nrg.ps %s/%s_all.nrg.png'%(convert,tmpDir,LName,htmlDir,LName)
    getError(runConvert)
  status,output = createGnuplot("%s/%s"%(tmpDir,LName),wat)
  if status != 0:
    print(status)
    print(output)
  else:
    runConvert = "%s -trim %s/%s.gp.ps %s/%s.gp.gif" %(convert,tmpDir,LName,tmpDir,LName)
    getError(runConvert)
    runConvert = "%s %s/%s.gp.gif %s/%s.gp.jpg" %(convert,tmpDir,LName,htmlDir,LName)
    getError(runConvert)
    runConvert = "%s -trim -geometry 200 %s/%s.gp.ps %s/%s.gp_thumb.gif" %(convert,tmpDir,LName,tmpDir,LName)
    getError(runConvert)
    runConvert = "%s %s/%s.gp_thumb.gif %s/%s.gp_thumb.jpg" %(convert,tmpDir,LName,htmlDir,LName)
    getError(runConvert)
  ######Create "do over" button
  line = '<FORM METHOD="POST" ACTION="../geofold.cgi" >\n'
  permWrite.write(line)
  permWrite.write('(<a href="http://www.bioinfo.rpi.edu/geofold/settings.html">Click for more info.</a>):<br>\n')
  permWrite.write('<textarea NAME="parameters" rows = 20 cols = 60 WRAP="off">\n')
  paramFile = open(paramFilename,'r')
  for line in paramFile:
    permWrite.write(line)
  permWrite.write('\n</textarea>\n')
  line = '<INPUT type="hidden" name="email_address" value="%s@rpi.edu">\n' %(UName)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="pdbid" value="%s">\n' %(pdbCode)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="chains" value="%s">\n' %(chain)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="parameters" value="%s">\n' %(paramFile)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="slash" value="/">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="space" value=" ">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="plus" value="+">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<INPUT type="hidden" name="lname" value="%s">\n' %(LName)
  tmpWrite.write(line)
  permWrite.write(line)
  line = '<p><INPUT TYPE="submit" NAME=".submit" VALUE="Do over">\n'
  tmpWrite.write(line)
  permWrite.write(line)
  tmpWrite.write('</FORM>\n')
  tmpWrite.close()
  makeCopy(htmlTmp,htmlOut)
  tmpWrite = open(htmlTmp,'a')
  outWrite = open(htmlOut,'a')
  outWrite.write('</pre></body></html>\n')
  outWrite.close()
  line = 'based on <a href="%s/%s/%s.html">%s</a>\n' %(baseURL,outputURL,LName,LName)
  permWrite.write(line)
  permWrite.write('</FORM>\n')
  #####BACK button
  permWrite.write('<h3><a href="../server.php">Back to GeoFold server</a></h3><br>\n')
  permWrite.write('</body></html>\n')
  permWrite.close()
  cp = "cp -v %s %s" %(htmlPerm,htmlOut)
  status,output=commands.getstatusoutput(cp)
  paramFile.close()   
  tmpWrite.close()
  nn=0
  for value in omegaRange:
    nn+=1
    commands.getstatusoutput("cp %s/%s_%s.dag.out %s/%s_%s.dag.out"%(tmpDir,LName,nn,htmlDir,LName,nn))
    commands.getstatusoutput("cp %s/%s_%s.dag.out %s/%s_%s.dag.out"%(tmpDir,LName,nn,gDir,LName,nn))
    commands.getstatusoutput("cp %s/%s_%s.log %s/%s_%s.log" %(tmpDir,LName,nn,htmlDir,LName,nn))
  #generate molscript
  status,output = makeMolScript('%s/%s'%(htmlDir,LName))
  if status != 0:
    print(status)
    print(output)
  else:
    print("paramFile or PDB file has not been specified")
    print("USAGE: rungeofold.py parametersFile")



