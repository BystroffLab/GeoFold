#ifndef GRAPH_H
#define GRAPH_H

#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<cstdlib>

using namespace std;

bool DEBUG_MAX = false;
bool DEBUG = false;
double THRESHOLD = 10;
class Node {
 public:
  string node_name;
  double traffic;
  bool highlight;
  bool max_highlight;
  bool visit;
  bool maxvisit;
  vector<Node *> parents;
  vector<Node *> children;
  Node *prev; //previous (parent) node visited in max flow
  Node( const string & my_name ) : node_name(my_name) { reset(); }
  Node( const string & my_name, const double & my_traffic);
  void reset( ) { traffic = 0.0; prev = NULL; highlight = false; max_highlight=false; visit=false; }
};

Node::Node(const string & my_name, const double & my_traffic) { 
  node_name = my_name;
  traffic = my_traffic;
  highlight = false;
  max_highlight = false;
  prev = NULL;
  visit = false;
  maxvisit = false;
}

typedef map<string, Node *> vmap;

class Graph {
 public:
  Graph();
  ~Graph();
  void addEdge( const string & source, const string & dest);
  void addNode(const string & name, const double & traffic);
  Node * getNode(const string & node_name);  
  //Node * root;
  void maxTraffic(Node * root);
  vector<Node *> maxPath;
  double max_val; //holds the value of the max path
  void print_tree( Node * root , char * dagfile);
 private:
  vmap vertexMap;
  vector<Node *> allNodes;
  int numNodes;
};

Graph::Graph() {}
Graph::~Graph() {
  for (unsigned int i = 0; i < allNodes.size(); ++i) { 
    delete allNodes[i];
  }
}

void Graph::addNode(const string & n_name, const double & n_traffic) { 
  vmap::iterator v_itr = vertexMap.find(n_name);
  if (v_itr == vertexMap.end() ) { 
    Node * new_node = new Node(n_name, n_traffic);
    allNodes.push_back(new_node);
    vertexMap[n_name] = new_node;
  }
}

Node * Graph::getNode(const string & n_name) {
  vmap::iterator v_itr = vertexMap.find(n_name);
  if (v_itr == vertexMap.end()) { //if the node does not exist
    Node * new_node = new Node( n_name); //create the node
    allNodes.push_back(new_node);
    vertexMap[ n_name ] = new_node;
    return new_node;
  }
  return v_itr->second; //return pointer to the node
}

void Graph::addEdge(const string & source, const string & dest) {
  //add a new edge to the graph
  Node * v = getNode(source);
  Node * w = getNode(dest);
  v->children.push_back(w); //update the parent's list
  w->parents.push_back(v); //update the child's list
}

void Graph::maxTraffic( Node * root ) { 
  root->maxvisit=true; //indicate the node as being visited
  max_val +=1;
  if (DEBUG_MAX == true) {
    cout << "---------------------" << endl;
    cout << "Visited node info: " << endl;
    cout << "---------------------" << endl;
    cout << "node: " << root->node_name << endl;
    cout << "traffic: " << root->traffic << endl;
  }
  //root->highlight = true;
  root->max_highlight = true; //highlight the node
  if (root->children.size() == 0 )
    return;
  else { 
    if (DEBUG_MAX == true) { 
      cout << "Number of children: " << root->children.size() << endl;
    }
    if (root->node_name[0] == 'n') { //if this is an intermediate state
      double high = (root->children[0])->traffic;
      int pos = 0;
      if (DEBUG_MAX == true) { 
	    cout << "children: " << endl;
	    for (unsigned int i = 0; i < root->children.size(); ++i) {
	      cout << (root->children[i])->node_name << " : ";
	      cout << (root->children[i])->traffic << endl;
	    }
      }
      for (unsigned int i = 0; i < root->children.size(); ++i) { 
	    if ( (root->children[i])->traffic > high) { 
	      high = (root->children[i])->traffic;
	      pos = i;
	    }
      }
      maxTraffic(root->children[pos]);
    }
    else { //we are at a transition state; transition states have two kids, always
      maxTraffic(root->children[0]);
      if (root->node_name[1] != 's') { maxTraffic(root->children[1]); }
    }
    return;
  }
}

/*
Prints out the contents of the tree as DOT source code
If you wish to modify the parameters that produce the visual
image generated by graphVIZ, make your modifications in the 
function below
*/
void Graph::print_tree(Node * root, char * dagfile) { 
  char * nodenum;
  char * LName = getenv("LNAME");
  root->visit = true; //mark the node as being visited
  if (DEBUG == true) { 
    cout << "______________________" << endl;
    cout << " Visited node info:" << endl;
    cout << "______________________" << endl;
    cout << "node: " << root->node_name << endl;
    cout << "traffic: " << root->traffic << endl;
    cout << "max_higlight: " << root->max_highlight << endl;
    cout << "number of children: " << root->children.size() << endl;
  }
  if ( root->children.size() == 0)
    return;
  if (DEBUG == true) { 
    cout << "children: " << endl;
     for (unsigned int i = 0; i < root->children.size(); ++i) { 
       cout << (root->children[i])->node_name << " : ";
       cout << (root->children[i])->traffic << endl;
     }
  }
  
  if (DEBUG == false) { 
    for (unsigned int i = 0; i < root->children.size(); ++i) {
      if (root->max_highlight == true) {
	    if (root->node_name[0] == 't') {
	      cout << root->node_name;
	      cout << " [label=\"\", fillcolor=\"";
	      if      (root->node_name[1] == 'p') { cout << "red"; }
	      else if (root->node_name[1] == 'h') { cout << "black"; }
	      else if (root->node_name[1] == 'b') { cout << "white"; }
	      else if (root->node_name[1] == 's') { cout << "blue"; }
	      else                                { cout << "grey"; }
          cout << "\", style=\"bold, filled\", shape=diamond, height=1.2, width=1.2, ";
	      cout << "fontsize=20, URL=\"../isegment.cgi?iseg=" << root->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	    }
	    else { 
          // Modified Tue Sep 29 06:11:30 EDT 2009 CB. Add node number to highlighted ISEGM
          nodenum = &(root->node_name[1]);
	      cout << root->node_name;
	      // cout << " [fillcolor=\"orange\", style=\"bold, filled\", label=\"\", shape=circle, height=1.3, ";
	      cout << " [label=\"" << nodenum << "\"," ;
          cout << " fillcolor=\"orange\", style=\"bold, filled\",  shape=circle, height=1.3, ";
	      cout << "fontsize=50, URL=\"../isegment.cgi?iseg=" << root->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	    }
      } //end if max_highlight is true
      else { 
	    if (root->node_name[0] == 't') {
	      cout << root->node_name; 
	      cout << " [label=\"\", fillcolor=\"";
	      if      (root->node_name[1] == 'p') { cout << "0.0 0.5 1.0"; }
	      else if (root->node_name[1] == 'h') { cout << "0.0 0.0 0.1"; }
	      else if (root->node_name[1] == 'b') { cout << "0.0 0.1 1.0"; }
	      else if (root->node_name[1] == 's') { cout << "#3333AA"; }
	      else                                { cout << "0.0 0.1 0.1"; }
          cout << "\",  shape=diamond, style=\"bold, filled\", " << endl;
	      cout << " URL=\"../isegment.cgi?iseg=" << root->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	    }
	    else {
	      cout << root->node_name;
	      cout << " [label=\"\", fillcolor=\".1 .5 1.0\",  shape=circle, style=\"bold, filled\", " << endl;
	      cout << " URL=\"../isegment.cgi?iseg=" << root->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	    }
      } //end else if max_highlight is not true
      if ( (root->children[i])->max_highlight == true ) {
	if ( (root->children[i])->node_name[0] == 't') { 
	  cout << (root->children[i])->node_name;
	  // cout << " [fillcolor=\"red\", style=\"bold, filled\", label=\"\", shape=diamond, height=1.2, width=1.2, ";
	  cout << " [label=\"\", fillcolor=\"red\", style=\"bold, filled\",  shape=diamond, height=1.2, width=1.2, ";
	  cout << "fontsize=20, URL=\"../isegment.cgi?iseg=" << (root->children[i])->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	}
	else { 
	  cout << (root->children[i])->node_name;
	  // cout << " [fillcolor=\"orange\", style=\"bold, filled\", label=\"\", shape=circle, height=1.3, ";
	  cout << " [label=\"\", fillcolor=\"orange\", style=\"bold, filled\",  shape=circle, height=1.3, ";
	  cout << "fontsize=20, URL=\"../isegment.cgi?iseg=" << (root->children[i])->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	}
	cout << root->node_name << " -> " << (root->children[i])->node_name;
	if (root->max_highlight == true) {
	  cout << "[style=\"setlinewidth(16)\", color=green, weight=\"60\"];" << endl;
	}
	else { 
	  cout << "[style=\"setlinewidth(4)\", color=gray, weight=\"10\"];" << endl;
	}
      } //end if child's max_highlight is true
      else {
	if ( (root->children[i])->node_name[0] == 't') { // if its a transition state
	  cout << (root->children[i])->node_name;
	  cout << " [label=\"\", fillcolor=\".0 .5 1.0\",  shape=diamond, style=\"bold, filled\", " << endl;
	  cout << " URL=\"../isegment.cgi?iseg=" << (root->children[i])->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	}
	else { //if it's an intermediate state
	  cout << (root->children[i])->node_name;
	  cout << " [label=\"\", fillcolor=\".1 .5 1.0\",  shape=circle, style=\"bold, filled\", " << endl;
	  cout << " URL=\"../isegment.cgi?iseg=" << (root->children[i])->node_name << "&dag="<<LName<<"/"<<dagfile << "&\"];" << endl;
	}
	cout << root->node_name << " -> " << (root->children[i])->node_name << endl;
	cout << "[style=\"setlinewidth(3)\", color=gray, weight=\"10\"];" << endl;
      } //end if child's max_highlight is not true
      if ( ( (root->children[i])->visit == false) ) {
        print_tree(root->children[i], dagfile);
      }
    } //end for loop
  } //end DEBUG
  return;
}

#endif
